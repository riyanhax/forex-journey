/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2004, MetaQuotes Software Corp."
#property link      "http://www.metaquotes.net/"

#include <WinUser32.mqh>

int gi_76 = 123456;
extern double lTakeProfit = 15.0;
extern double sTakeProfit = 15.0;
extern double lStopLoss = 50.0;
extern double sStopLoss = 50.0;
extern double lotsi = 50.0;
extern string gs_addSpread = "Add spread to profit target? T/F";
extern bool gb_addSpread = FALSE;
extern int max_num_orders = 9999;
extern int max_orders_per_symbol = 10;
extern int max_num_buys_per_symbol = 9;
extern double mm = 2.0;
extern int risk = 1;
extern string stagger_settings = "Stagger Settings (-2)Use Spread (-1)Auto";
extern bool stagger_trades = TRUE;
extern double buy_stagger = -1.0;
extern double sell_stagger = -1.0;
extern string MM = "Money Management";
extern bool UseMM = FALSE;
extern double PercentMM = 2.0;
extern string gsTimeFilter = "------Time Filter Parameters-----";
extern bool TradeOnSunday = FALSE;
extern bool MondayToThursdayTimeFilter = TRUE;
extern int MondayToThursdayStartHour = 0;
extern int MondayToThursdayEndHour = 24;
extern bool FridayTimeFilter = FALSE;
extern int FridayStartHour = 0;
extern int FridayEndHour = 21;
extern bool close_all_trades = FALSE;
extern string gsTimeFilterEnd = "--End of Time Filter Parameters--";
extern color clOpenBuy = Green;
extern color clOpenSell = Red;
extern string Name_Expert = "es_capelast_reversed_ECN_v1.04";
extern int magic_number = 789667;
extern int Slippage = 1;
extern bool UseSound = FALSE;
extern string NameFileSound = "Alert.wav";
extern double Lots = 0.2;
extern bool reverseLogic = FALSE;
int g_ticket_300;
double gd_304;
double gd_312;
bool gi_320 = FALSE;
bool g_bool_324 = FALSE;
bool g_bool_328 = FALSE;
#property copyright "xxx"
#property link      "http://xxx"

extern int    EA_magic          = 2009384;
extern double POS_tp            = 5;
extern double POS_sl            = 30;
extern double POS_slippage      = 3;
extern int    POS_num_max       = 1;
extern double        minLots           = 0.1;
extern double        maxLots           = 15;
extern int           Risk_percent      = 57;
extern int MA_prm_1                    = 8;
extern int MA_prm_2                    = 17;
extern int MA_prm_3                    = 20;
extern int MA_prm_4                    = 29;
extern int MA_prm_5                    = 37;
extern int    RSI_period5              = 11;
extern int    RSI_period1              = 38;
extern double RSI_upper                = 51;
extern double RSI_lower                = 50;


#define DEF_MA_TYP              5
#define DEF_MA_NUM              4
double Buf_MA[DEF_MA_TYP][DEF_MA_NUM];


int     POS_n_BUY;
int     POS_n_SELL;
int     POS_n_total;
#define SIG_Buy                 0
#define SIG_Sell                1
#define SIG_MAX                 2
bool    TradeSign[SIG_MAX];


void count_position()
{
    POS_n_BUY  = 0;
    POS_n_SELL = 0;

    for( int i = 0 ; i < OrdersTotal() ; i++ ){
        if( OrderSelect( i, SELECT_BY_POS, MODE_TRADES ) == false ){
            break;
        }
        if( OrderMagicNumber() != EA_magic ){
            continue;
        }
        if( OrderSymbol() != Symbol() ){
            continue;
        }
        if( OrderType() == OP_BUY ){
            POS_n_BUY++;
        }
        else if( OrderType() == OP_SELL ){
            POS_n_SELL++;
        }
    }
    POS_n_total = POS_n_BUY + POS_n_SELL;
}


int start()
{
int li_unused_0 = 0;
   if (mm != 0.0) lotsi = MathCeil(AccountBalance() * risk / 10000.0);
   else lotsi = Lots;
   if (mm != 0.0) lotsi = MathCeil(AccountBalance() * risk / 10000.0) / 10.0;
   else lotsi = Lots;
   if (lotsi > 100.0) lotsi = 100;
   if (IsTradeAllowed() == FALSE) return (0);
   if (Bars < 100) {
      Print("bars less than 100");
      return (0);
   }
   if (lTakeProfit < 1.0) {
      Print("TakeProfit less than 1");
      return (0);
   }
   if (sTakeProfit < 1.0) {
      Print("TakeProfit less than 1");
      return (0);
   }
   double l_iclose_4 = iClose(NULL, PERIOD_M5, 0);
   double l_ima_12 = iMA(NULL, PERIOD_M5, 5, 0, MODE_EMA, PRICE_OPEN, 1);
   double l_iclose_20 = iClose(NULL, PERIOD_M5, 0);
   double l_ima_28 = iMA(NULL, PERIOD_M5, 4, 0, MODE_EMA, PRICE_OPEN, 1);
   if (AccountFreeMargin() < 1000.0 * Lots) {
      Print("We have no money. Free Margin = ", AccountFreeMargin());
      return (0);
   }
   if (!TimeFilterOK()) {
      if (close_all_trades) CloseAllTrades();
      return (0);
   }
   double ld_36 = 0.0;
   double ld_44 = 0.0;
   if (stagger_trades) {
      ld_36 = GetStaggerAmount(buy_stagger, lTakeProfit, max_num_buys_per_symbol);
      ld_44 = GetStaggerAmount(sell_stagger, sTakeProfit, max_orders_per_symbol - max_num_buys_per_symbol);
   }
   GetBuySellStatus(ld_36, ld_44);
   if (!ExistPositions()) {
      if (l_iclose_4 < l_ima_12) {
         if (reverseLogic) {
            if (g_bool_328) OpenSell();
         } else
            if (g_bool_324) OpenBuy();
         return (0);
      }
      if (l_iclose_20 > l_ima_28) {
         if (reverseLogic) {
            if (g_bool_324) OpenBuy();
         } else
            if (g_bool_328) OpenSell();
         return (0);
      }
   }
   return (0);
    double pos_tp  = 0.0;
    double pos_sl  = 0.0;
    int   spread = MarketInfo(Symbol(),MODE_SPREAD);
    int    ticket;
    int    signal = 0;
    if( IsTradeAllowed() != true ){
        return(0);
    }
  

    if( get_signal() == true ){
        count_position();
        Call_MM();
        if( POS_n_total < POS_num_max ){
            if( TradeSign[SIG_Buy]== true ){
                pos_tp = Ask + (POS_tp * Point);
                pos_sl = Ask - (POS_sl * Point);
                ticket = OrderSend( Symbol(), OP_BUY, Lots, Ask, POS_slippage, pos_sl, pos_tp, " ", EA_magic, 0, Blue );
                Print("ticket ",GetLastError());
                if( ticket < 0 ){
                    Sleep(5000);
                }
            }
            if( TradeSign[SIG_Sell] == true ){
                pos_tp = Bid - (POS_tp * Point);
                pos_sl = Bid + (POS_sl * Point);
                ticket = OrderSend( Symbol(), OP_SELL, Lots, Bid, POS_slippage, pos_sl, pos_tp, " ", EA_magic, 0, Red );
                Print("ticket ",GetLastError());
                if( ticket < 0 ){
                    Sleep(5000);
                }
            }
        }
    }

    return(0);
}

bool get_signal()
{
    bool enable_trade = false;
    int  trend_up   = 0;
    int  trend_down = 0;
    int  i;

    ArrayInitialize( TradeSign, false );

    if( Bars >= 100 ){
        for( i = 0 ; i < DEF_MA_NUM ; i++ ){
            Buf_MA[0][ i ] = calc_SMA( PERIOD_H1, MA_prm_1, i );
            Buf_MA[1][ i ] = calc_SMA( PERIOD_H1, MA_prm_2, i );
            Buf_MA[2][ i ] = calc_SMA( PERIOD_H1, MA_prm_3, i );
            Buf_MA[3][ i ] = calc_SMA( PERIOD_H1, MA_prm_4, i );
            Buf_MA[4][ i ] = calc_SMA( PERIOD_H1, MA_prm_5, i );
        }
        double vRSI   = iRSI( Symbol(), PERIOD_M15, RSI_period5, PRICE_OPEN, 0 );
        double vRSI2  = iRSI( Symbol(), PERIOD_M5, RSI_period1, PRICE_OPEN, 0 );

        for( i = 0 ; i < DEF_MA_TYP ; i++ ){
            if((Buf_MA[i][2] < Buf_MA[i][1]) && (Buf_MA[i][1] < Buf_MA[i][0])){
                trend_up++;
            }
        }
        if((trend_up > 3) && (vRSI <= RSI_lower) && (vRSI2 <= RSI_lower)){
            TradeSign[SIG_Buy] = true;
            enable_trade = true;
        }

        for( i = 0 ; i < DEF_MA_TYP ; i++ ){
            if((Buf_MA[i][2] > Buf_MA[i][1]) && (Buf_MA[i][1] > Buf_MA[i][0])){
                trend_down++;
            }
        }
        if((trend_down > 3) && (vRSI >= RSI_upper) && (vRSI2 >= RSI_upper)){
            TradeSign[SIG_Sell] = true;
            enable_trade = true;
        }
    }

    return(enable_trade);
}

double calc_SMA( int timeframe, int period, int offset )
{
    double vMA = 0;
    double sum=0;
    int    i;

    for( i = 0 ; i < period ; i++ ){
        sum += iClose( Symbol(), timeframe, i + offset );
    }
    vMA = sum / period;

    return(vMA);
}

void Call_MM()
{
   Lots=AccountFreeMargin()/100000*Risk_percent;

   Lots=MathMin(maxLots,MathMax(minLots,Lots));
   if(minLots<0.1) 
     Lots=NormalizeDouble(Lots,2);
   else
     {
     if(minLots<1) Lots=NormalizeDouble(Lots,1);
     else          Lots=NormalizeDouble(Lots,0);
     }


   return(0);
   }







int init() {
   int li_0 = GetStopLevel();
   if (lTakeProfit < li_0 || sTakeProfit < li_0 || lStopLoss < li_0 || sStopLoss < li_0) {
      MessageBox("Failed to initialize because profit or stop set too tight.\n Broker minimum is " + li_0 + " pips. Now closing the ea.");
      PostMessageA(WindowHandle(Symbol(), Period()), WM_COMMAND, 33050, 0);
      return (0);
   }
   if (max_num_buys_per_symbol > max_orders_per_symbol) {
      MessageBox("Failed to initialize because maximun buys per symbol.\n is greater than the maximum orders per symbol. Now closing the ea.");
      PostMessageA(WindowHandle(Symbol(), Period()), WM_COMMAND, 33050, 0);
      return (0);
   }
   if (max_orders_per_symbol > max_num_orders) {
      MessageBox("Failed to initialize because maximun orders per symbol.\n is greater than the total number of maximum orders. Now closing the ea.");
      PostMessageA(WindowHandle(Symbol(), Period()), WM_COMMAND, 33050, 0);
      return (0);
   }
   if (IsDemo() == TRUE) {
      gi_320 = FALSE;
      Comment(Name_Expert + " trading on DEMO account");
   } else {
      gi_320 = CheckAccountNumber();
      if (gi_320 == FALSE) return (0);
      Comment(Name_Expert + " trading on LIVE account");
   }
   gd_304 = GetRealPipValue();
   gd_312 = SetDigit();
   if (Digits == 5 || Digits == 3) Slippage = 0 * Slippage;
   return (0);
}

void deinit() {
   Comment("");
}


bool ExistPositions() {
   if (OrdersTotal() >= max_num_orders || OrderCount() >= max_orders_per_symbol) return (TRUE);
   return (FALSE);
}

int OrderCount() {
   int l_count_0 = 0;
   for (int l_pos_4 = 0; l_pos_4 < OrdersTotal(); l_pos_4++) {
      if (OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES))
         if (OrderSymbol() == Symbol()) l_count_0++;
   }
   return (l_count_0);
}

void GetBuySellStatus(double ad_0, double ad_8) {
   int l_count_16 = 0;
   int l_count_20 = 0;
   int li_24 = 1;
   int li_28 = 1;
   for (int l_pos_32 = 0; l_pos_32 < OrdersTotal(); l_pos_32++) {
      if (OrderSelect(l_pos_32, SELECT_BY_POS, MODE_TRADES)) {
         if (OrderSymbol() == Symbol()) {
            if (OrderType() == OP_BUY) {
               l_count_16++;
               if (li_24 && stagger_trades) li_24 = PriceOutsideStaggerRange(OrderOpenPrice(), ad_0, 0);
            } else {
               l_count_20++;
               if (li_28 && stagger_trades) li_28 = PriceOutsideStaggerRange(OrderOpenPrice(), ad_8, 1);
            }
         }
      }
   }
   g_bool_324 = SetBuySellFlags(l_count_16, max_num_buys_per_symbol);
   g_bool_328 = SetBuySellFlags(l_count_20, max_orders_per_symbol - max_num_buys_per_symbol);
   if (l_count_16 == 0) g_bool_324 = TRUE;
   else g_bool_324 = g_bool_324 && li_24 || !stagger_trades;
   if (l_count_20 == 0) {
      g_bool_328 = TRUE;
      return;
   }
   g_bool_328 = g_bool_328 && li_28 || !stagger_trades;
}

int PriceOutsideStaggerRange(double ad_0, double ad_8, int ai_16) {
   if (ai_16 == 0) {
      if (!(Ask > ad_0 + ad_8 || Ask < ad_0 - ad_8)) return (0);
      return (1);
   }
   if (Bid > ad_0 + ad_8 || Bid < ad_0 - ad_8) return (1);
   return (0);
}

int SetBuySellFlags(int ai_0, int ai_4) {
   if (ai_0 < ai_4) return (1);
   return (0);
}

void OpenBuy() {
   double l_lots_0 = GetSizeLot();
   double l_price_8 = GetStopLossBuy();
   double l_price_16 = GetTakeProfitBuy();
   string ls_24 = GetCommentForOrder();
   g_ticket_300 = OrderSend(Symbol(), OP_BUY, l_lots_0, Ask, Slippage, 0, 0, Name_Expert, magic_number, 0, clOpenBuy);
   OrderSelect(g_ticket_300, SELECT_BY_TICKET);
   OrderModify(OrderTicket(), OrderOpenPrice(), l_price_8, l_price_16, 0, Blue);
   if (UseSound) PlaySound(NameFileSound);
}

void OpenSell() {
   double l_lots_0 = GetSizeLot();
   double l_price_8 = GetStopLossSell();
   double l_price_16 = GetTakeProfitSell();
   string ls_24 = GetCommentForOrder();
   g_ticket_300 = OrderSend(Symbol(), OP_SELL, l_lots_0, Bid, Slippage, 0, 0, Name_Expert, magic_number, 0, clOpenSell);
   OrderSelect(g_ticket_300, SELECT_BY_TICKET);
   OrderModify(OrderTicket(), OrderOpenPrice(), l_price_8, l_price_16, 0, Red);
   if (UseSound) PlaySound(NameFileSound);
}

string GetCommentForOrder() {
   return (Name_Expert);
}

double GetSizeLot() {
   return (Lots);
}

double GetRealPipValue() {
   double ld_ret_0;
   if (Digits < 4) ld_ret_0 = 0.01;
   else ld_ret_0 = 0.0001;
   return (ld_ret_0);
}

double GetStaggerAmount(double ad_0, int ai_8, int ai_12) {
   if (ad_0 < -1.0) return (gd_304 * GetSpread());
   if (ad_0 < 0.0) return (NormalizeDouble(gd_304 * (ai_8 / ai_12), Digits));
   return (gd_304 * ad_0);
}

double GetSpread() {
   double ld_ret_0 = MarketInfo(Symbol(), MODE_SPREAD);
   if (Digits == 5 || Digits == 3) ld_ret_0 /= 10.0;
   return (ld_ret_0);
}

double SetDigit() {
   double ld_ret_0;
   if (Digits < 4) ld_ret_0 = 2;
   else ld_ret_0 = 4;
   return (ld_ret_0);
}

double GetStopLevel() {
   double ld_ret_0 = MarketInfo(Symbol(), MODE_STOPLEVEL);
   if (Digits == 3 || Digits == 5) ld_ret_0 /= 10.0;
   return (ld_ret_0);
}

double GetTakeProfitBuy() {
   double ld_0 = Ask + lTakeProfit * gd_304;
   if (gb_addSpread) ld_0 += gd_304 * MarketInfo(Symbol(), MODE_SPREAD);
   ld_0 = NormalizeDouble(ld_0, gd_312);
   return (ld_0);
}

double GetTakeProfitSell() {
   double ld_0 = Bid - sTakeProfit * gd_304;
   if (gb_addSpread) ld_0 -= gd_304 * MarketInfo(Symbol(), MODE_SPREAD);
   ld_0 = NormalizeDouble(ld_0, gd_312);
   return (ld_0);
}

double GetStopLossBuy() {
   return (NormalizeDouble(Bid - lStopLoss * gd_304, gd_312));
}

double GetStopLossSell() {
   return (NormalizeDouble(Ask + sStopLoss * gd_304, gd_312));
}

int CheckAccountNumber() {
   if (gi_76 == AccountNumber()) return (1);
   Alert("AccountNumber entered is incorrect.\n You entered ", gi_76);
   return (0);
}

bool TimeFilterOK() {
   if ((TradeOnSunday == FALSE && DayOfWeek() == 0) || (MondayToThursdayTimeFilter && DayOfWeek() >= 0 && DayOfWeek() <= 4 && !(Hour() >= MondayToThursdayStartHour &&
      Hour() < MondayToThursdayEndHour)) || (FridayTimeFilter && DayOfWeek() == 5 && !(Hour() >= FridayStartHour && Hour() < FridayEndHour))) return (FALSE);
   return (TRUE);
}

void CloseAllTrades() {
   int l_ord_close_0;
   double l_price_4;
   int l_cmd_12;
   int l_error_16;
   int l_ord_total_20 = OrdersTotal();
   for (int l_pos_24 = l_ord_total_20 - 1; l_pos_24 >= 0; l_pos_24--) {
      if (OrderSelect(l_pos_24, SELECT_BY_POS, MODE_TRADES)) {
         if (magic_number != OrderMagicNumber()) continue;
         l_cmd_12 = OrderType();
         if (OrderSymbol() != Symbol()) continue;
         while (true) {
            if (l_cmd_12 == OP_BUY) l_price_4 = Bid;
            else l_price_4 = Ask;
            l_ord_close_0 = OrderClose(OrderTicket(), OrderLots(), l_price_4, 3, CLR_NONE);
            if (l_ord_close_0 != 1) {
               l_error_16 = GetLastError();
               Print("LastError = ", l_error_16);
            } else l_error_16 = 0;
            if (l_error_16 != 135/* PRICE_CHANGED */) break;
            RefreshRates();
         }
      }
      Print("Error when order select ", GetLastError());
   }
}


