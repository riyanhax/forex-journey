/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/

#property indicator_chart_window
#property indicator_buffers 2
#property indicator_color1 DodgerBlue
#property indicator_color2 OrangeRed

extern int Arrowperiod = 53;
extern double Arrowsticker = 1.2;
extern int SL_distance_pips = 200;
extern bool EmailAlert = TRUE;
extern int Upper = 2;
extern int Downner = 3;
string gs_104 = "bs";
double g_ibuf_112[];
double g_ibuf_116[];
double g_ibuf_120[];
datetime g_time_124;

void DisplayAlert(string as_0, double ad_8, double ad_16, double ad_24, int ai_32) {
   string ls_36;
   string ls_44;
   string ls_52;
   string ls_60;
   if (Time[0] != g_time_124) {
      g_time_124 = Time[0];
      if (ad_24 != 0.0) ls_52 = "Price " + DoubleToStr(ad_24, 4);
      else ls_52 = "";
      if (ad_8 != 0.0) ls_44 = ", TakeProfit -  " + DoubleToStr(ad_8, 4);
      else ls_44 = "";
      if (ad_16 != 0.0) ls_36 = ", StopLoss  - " + DoubleToStr(ad_16, 4);
      else ls_36 = "";
      ls_60 = "Entry - " + as_0 + ls_52 + ls_44 + ls_36 + " ";
      drawSignalArrow(g_time_124, ad_16, ai_32, ls_60);
      if (ai_32 > 0) {
         SendMail("Buy signal alert ", "Buy signal at Ask=" + DoubleToStr(Ask, 4) + ", Bid=" + DoubleToStr(Bid, 4) + ", Date=" + TimeToStr(TimeCurrent(), TIME_DATE) + " " +
            TimeHour(TimeCurrent()) + ":" + TimeMinute(TimeCurrent()) + " Symbol=" + Symbol() + " Period=" + Period());
      }
      if (ai_32 < 0) {
         SendMail("Sell signal alert", "SELL signal at Ask=" + DoubleToStr(Ask, 4) + ", Bid=" + DoubleToStr(Bid, 4) + ", Date=" + TimeToStr(TimeCurrent(), TIME_DATE) + " " +
            TimeHour(TimeCurrent()) + ":" + TimeMinute(TimeCurrent()) + " Symbol=" + Symbol() + " Period=" + Period());
      }
      Alert(ls_60, Symbol(), ", ", Period(), " minute MT4 chart");
   }
}

int init() {
   int li_0;
   if (Arrowperiod == 8) li_0 = 2;
   else li_0 = 4;
   IndicatorBuffers(3);
   string ls_4 = "(" + Arrowperiod + ")";
   SetIndexBuffer(0, g_ibuf_112);
   SetIndexStyle(0, DRAW_NONE, STYLE_SOLID, li_0);
   SetIndexLabel(0, "" + ls_4);
   SetIndexBuffer(1, g_ibuf_116);
   SetIndexStyle(1, DRAW_NONE, STYLE_SOLID, li_0);
   SetIndexLabel(1, "" + ls_4);
   SetIndexBuffer(2, g_ibuf_120);
   ArraySetAsSeries(g_ibuf_120, TRUE);
   IndicatorShortName("Buy&Sell");
   IndicatorDigits(MarketInfo(Symbol(), MODE_DIGITS) + 1.0);
   return (0);
}

int deinit() {
   DelObj("");
   return (0);
}

double WMA(int ai_0, int a_period_4) {
   return (iMA(NULL, 0, a_period_4, 0, Upper, Downner, ai_0));
}

int start() {
   string ls_4;
   double lda_28[];
   double lda_32[];
   double ld_44;
   int l_ind_counted_0 = IndicatorCounted();
   if (l_ind_counted_0 < 0) return (-1);
   int li_12 = 1;
   int l_period_16 = MathFloor(MathSqrt(Arrowperiod));
   int li_20 = MathFloor(Arrowperiod / Arrowsticker);
   int li_24 = Bars - l_ind_counted_0 + Arrowperiod + 1;
   if (li_24 > Bars) li_24 = Bars;
   ArraySetAsSeries(lda_28, TRUE);
   ArrayResize(lda_28, li_24);
   ArraySetAsSeries(lda_32, TRUE);
   ArrayResize(lda_32, li_24);
   double ld_36 = Close[1];
   for (li_12 = 0; li_12 < li_24; li_12++) lda_28[li_12] = 2.0 * WMA(li_12, li_20) - WMA(li_12, Arrowperiod);
   for (li_12 = 0; li_12 < li_24 - Arrowperiod; li_12++) g_ibuf_120[li_12] = iMAOnArray(lda_28, 0, l_period_16, 0, Upper, li_12);
   for (li_12 = li_24 - Arrowperiod; li_12 > 0; li_12--) {
      lda_32[li_12] = lda_32[li_12 + 1];
      if (g_ibuf_120[li_12] > g_ibuf_120[li_12 + 1]) lda_32[li_12] = 1;
      if (g_ibuf_120[li_12] < g_ibuf_120[li_12 + 1]) lda_32[li_12] = -1;
      ls_4 = "trendx=" + lda_32[li_12] + " trendx+1=" + ((lda_32[li_12 + 1])) + " x=" + li_12 + " countedbars=" + l_ind_counted_0;
      if (lda_32[li_12] > 0.0) {
         g_ibuf_112[li_12] = g_ibuf_120[li_12];
         if (lda_32[li_12 + 1] < 0.0) g_ibuf_112[li_12 + 1] = g_ibuf_120[li_12 + 1];
         if (lda_32[li_12 + 1] < 0.0) {
            if (li_12 == 1) {
               ld_44 = Low[4] - SL_distance_pips * Point;
               DisplayAlert(" Buy signal - ", 0, ld_44, ld_36, 1);
            }
            if (l_ind_counted_0 == 0) drawSignalArrow(Time[li_12], Low[li_12 + 1] - SL_distance_pips * Point, 1, ls_4);
         }
         g_ibuf_116[li_12] = EMPTY_VALUE;
      } else {
         if (lda_32[li_12] < 0.0) {
            g_ibuf_116[li_12] = g_ibuf_120[li_12];
            if (lda_32[li_12 + 1] > 0.0) g_ibuf_116[li_12 + 1] = g_ibuf_120[li_12 + 1];
            if (lda_32[li_12 + 1] > 0.0) {
               if (li_12 == 1) {
                  ld_44 = High[4] + SL_distance_pips * Point;
                  DisplayAlert(" Sell signal - ", 0, ld_44, ld_36, -1);
               }
               if (l_ind_counted_0 == 0) drawSignalArrow(Time[li_12], High[li_12 + 1] + SL_distance_pips * Point, -1, ls_4);
            }
            g_ibuf_112[li_12] = EMPTY_VALUE;
         }
      }
   }
   return (0);
}

void DelObj(string as_0) {
   string l_name_8;
   int li_20;
   string ls_24;
   for (int li_16 = ObjectsTotal() - 1; li_16 >= 0; li_16--) {
      l_name_8 = ObjectName(li_16);
      li_20 = StringLen(as_0) + StringLen(gs_104);
      ls_24 = as_0 + gs_104;
      if (StringSubstr(l_name_8, 0, li_20) == ls_24) ObjectDelete(l_name_8);
   }
}

void drawSignalArrow(int a_datetime_0, double a_price_4, int ai_12, string a_text_16) {
   int li_24;
   color l_color_36;
   if (ai_12 > 0) {
      li_24 = 233;
      a_price_4 -= 1.0 * Point;
   } else {
      li_24 = 234;
      a_price_4 += 10.0 * Point;
   }
   string l_name_28 = gs_104 + "signalArrow" + a_price_4 + a_datetime_0 + li_24;
   if (ai_12 < 1) l_color_36 = Red;
   else l_color_36 = Green;
   ObjectDelete(l_name_28);
   ObjectCreate(l_name_28, OBJ_ARROW, 0, a_datetime_0, a_price_4, 0, 0, 0, 0);
   ObjectSet(l_name_28, OBJPROP_WIDTH, 2);
   ObjectSet(l_name_28, OBJPROP_ARROWCODE, li_24);
   ObjectSet(l_name_28, OBJPROP_COLOR, l_color_36);
   ObjectSetText(l_name_28, a_text_16, 0);
}