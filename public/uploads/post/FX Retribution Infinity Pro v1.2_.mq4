/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "FX Retribution Infinity Pro v1.2"
#property link      "http://www.metaquotes.net/"

#include <WinUser32.mqh>
#include <stdlib.mqh>

#import "kernel32.dll"
   int GetTimeZoneInformation(int& a0[]);
#import

string gs_unused_76 = "";
string gs_unused_84 = "System Parameters";
bool gi_92 = TRUE;
bool gi_96 = TRUE;
double gd_100 = 0.0;
bool gi_108 = TRUE;
bool gi_112 = TRUE;
int g_magic_116 = 77777773;
int g_magic_120 = 33333337;
string gs_unused_124 = "";
string gs_unused_132 = "Comment Position";
int gi_140 = 30;
int gi_144 = 20;
int gi_148 = 16119285;
int gi_152 = 13882323;
string gs_unused_156 = "Strategy Parameters";
int gi_164 = 3;
string g_comment_168 = "";
string gs_unused_176 = "Order Management";
extern double Default_Lot_Size = 0.1;
extern string _5 = "Money_Management (Adjust Carefully)";
extern string _9 = "Putting 0.10 will risk 10% of account balance";
extern double Risk_Percentage = 0.1;
extern bool Hedge_Allowed = FALSE;
extern bool Recover_Bad_Trades = TRUE;
extern bool Send_Email_Alerts = FALSE;
bool gi_228 = FALSE;
double gd_232 = 1000.0;
double gd_240 = 0.2;
bool gi_248 = FALSE;
bool gi_252 = TRUE;
bool gi_256 = TRUE;
int gi_260 = 3;
bool gi_264 = TRUE;
int gi_268;
int g_datetime_272;
int gi_276;
double g_hour_280;
int gi_288;
int g_spread_292;
int g_spread_296;
int g_stoplevel_300;
double gd_304;
double gd_312;
double gd_320;
bool gi_328 = FALSE;
int gi_332 = 16384;
int gi_336 = 0;
string gs_340;
string gs_dummy_348;
string gs_dummy_356;
string gs_dummy_364;
int g_timeframe_372 = PERIOD_M15;
int gi_376 = 10;
int gi_380 = 50;
int gi_384 = 150;
int gi_388 = 40;
int gi_392 = 0;
int gi_396 = 16711680;
int gi_400 = 255;
int g_period_404 = 6;
int g_period_408 = 20;
int g_period_412 = 8;
double gd_416 = 70.0;
double gd_424 = 30.0;
double gd_432 = 70.0;
double gd_440 = 30.0;
bool gi_448 = TRUE;
bool gi_452 = TRUE;
bool gi_456 = TRUE;
int gi_460 = 12;
bool gi_464 = TRUE;
int gi_468 = 20;
bool gi_472 = TRUE;
bool gi_476 = FALSE;
double gd_480 = 1.0;
double gd_488 = 12.0;
bool gi_496 = TRUE;
double gd_500 = 1.0;
double gd_508 = 1.0;
bool gi_516 = FALSE;
int gi_520 = 4;
bool gi_524 = TRUE;
bool gi_528 = TRUE;
int gi_532 = 21;
int gi_536 = 23;
int gi_540 = 21;
int gi_544 = 23;
int g_timeframe_548 = PERIOD_M1;
int gi_552 = 15;
int gi_556 = 60;
int gi_560 = 150;
int gi_564 = 30;
double gd_568 = 3.0;
int gi_576 = 0;
int gi_580 = 16748574;
int gi_584 = 9639167;
int gi_588 = 180;
int g_period_592 = 60;
int g_period_596 = 275;
bool gi_600 = TRUE;
bool gi_604 = FALSE;
bool gi_608 = TRUE;
double gd_612 = 1.0;
double gd_620 = 3.0;
double gd_628 = 12.0;
bool gi_636 = FALSE;
bool gi_640 = FALSE;
int gi_644 = 4;
bool gi_648 = TRUE;
bool gi_652 = TRUE;
int gi_656 = 22;
int gi_660 = 23;
int gi_664 = 22;
int gi_668 = 23;
int gi_672 = 0;
int gi_676 = 0;
int gi_680 = 0;
int gi_684;
int gi_688;
int gi_692;
int gi_696;
double gd_700 = 0.0;
double gd_708 = 0.0;
bool gi_716 = FALSE;
bool gi_720;
bool gi_724;
int gi_728;
int g_count_732 = 0;
int g_ticket_736 = -2;
int g_ticket_740 = -2;
double g_ord_profit_744 = 0.0;
double g_ord_profit_752 = 0.0;
int g_ticket_760 = -2;
int g_ticket_764 = -2;
double g_ord_profit_768 = 0.0;
double g_ord_profit_776 = 0.0;
int gi_784 = 0;
int gi_788 = 0;
int gi_792 = 0;
int gi_796 = 0;
double g_irsi_800;
double g_irsi_808;
double g_irsi_816;
double g_irsi_824;
double g_icci_832;
double g_icci_840;
double g_icci_848;
double g_ima_856;
bool gi_864 = TRUE;
bool gi_868 = TRUE;
double g_ihigh_872 = 0.0;
double g_ilow_880 = 0.0;
bool gi_888 = FALSE;
int gi_892 = 0;
int gi_896 = 0;
int gi_900 = 0;
int gi_904 = 0;
int gi_908;
int gi_912;
int gi_916 = 0;
int gi_920 = 0;
int gi_924;
int g_datetime_928 = 0;
int g_datetime_932 = 0;
int g_ticket_936 = 0;
int g_datetime_940 = 0;
int g_ticket_944 = 0;
int g_datetime_948 = 0;
bool gi_952 = TRUE;
int g_datetime_956 = 0;
int g_datetime_960 = 0;
int gi_964 = 0;
double g_icci_968;
double g_icci_976;
double g_ihigh_984;
double g_ilow_992;
double g_ihigh_1000;
double g_ilow_1008;
bool gi_1016 = FALSE;
int gi_1020 = 0;
int gi_1024 = 0;
int gi_1028 = 0;
int gi_1032 = 0;
int gi_1036;
int gi_1040;
int g_ticket_1044 = -1;
int gi_1048;
int gi_1052;
int g_datetime_1056;
int g_datetime_1060;
double g_ord_open_price_1064;
int g_ticket_1072 = -1;
int gi_1076;
int gi_1080;
int g_datetime_1084;
int g_datetime_1088;
double g_ord_open_price_1092;
bool gi_1100 = TRUE;
int g_datetime_1104 = 0;
int g_datetime_1108 = 0;
string gsa_1112[] = {".", "..", "...", "....", "....."};
int gi_unused_1116 = 0;
int gi_unused_1120 = 0;
string gs_unused_1124 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
bool gi_1132 = FALSE;

int S1_CheckSymbol() {
   return (1);
}

int S2_CheckSymbol() {
   return (1);
}

int init() {
   if (gi_264) gi_268 = 0;
   else gi_268 = 1;
   gi_688 = gi_144;
   gi_684 = gi_140;
   if (gi_692 != gi_144 || gi_696 != gi_140) {
      gi_692 = gi_144;
      gi_696 = gi_140;
   } else GetPos(0, gi_688, gi_684);
   gi_676 = 0;
   gi_672 = 0;
   gs_340 = "Welcome " + AccountName();
   PrintLN(gs_340, gi_152);
   ObjectsRedraw();
   for (int l_count_16 = 0; !IsStopped() && !IsConnected() || StringLen(AccountName()) <= 0; l_count_16++) {
      PrintLN("Waiting for connection" + PPrint(l_count_16), gi_148, 2, 2);
      ObjectsRedraw();
      Sleep(150);
   }
   PrintLN("Checking Data...", gi_148, 2, 2);
   ObjectsRedraw();
   PrintResponse(gi_332, 2, 2);
   PrintLN("--------------------------");
   ObjectsRedraw();
   bool li_20 = FALSE;
   bool li_24 = FALSE;
   li_20 = S1_CheckSymbol();
   li_24 = S2_CheckSymbol();
   if (li_20) {
      gi_252 = TRUE;
      if (gi_96) gi_256 = li_24;
      else gi_256 = FALSE;
   } else {
      if (li_24) {
         gi_252 = FALSE;
         gi_256 = TRUE;
      } else {
         gi_256 = FALSE;
         gi_252 = FALSE;
      }
   }
   ObjectsRedraw();
   if (!gi_252 && !gi_256) MessageBox("You have selected the wrong currency pair!", gs_340 + ": Warning", MB_ICONEXCLAMATION);
   gd_320 = gd_232;
   gi_336 = 0;
   if (!IsTesting()) gi_328 = TRUE;
   return (0);
}

int deinit() {
   if (IsTesting()) {
      if (!IsVisualMode()) {
         PrintLN("GmtOffset:");
         PrintLN(DoubleToStr(gd_100, 1), gi_152, gi_676, gi_672 - 1, 55);
         PrintSep();
         PrintLN("Digits:");
         PrintLN(Digits, gi_152, gi_676, gi_672 - 1, 35);
         PrintLN("Spread:");
         PrintLN(StringConcatenate(DoubleToStr(g_spread_292 / gd_304, 1), " (", g_spread_292, " pips)"), gi_152, gi_676, gi_672 - 1, 40);
         PrintSep();
      }
      return (0);
   }
   switch (UninitializeReason()) {
   case REASON_CHARTCLOSE:
   case REASON_REMOVE:
      Deleteobjects(0, gi_680);
      gi_680 = 0;
      break;
   case REASON_RECOMPILE:
   case REASON_CHARTCHANGE:
   case REASON_PARAMETERS:
   case REASON_ACCOUNT:
      Deleteobjects(1, gi_680);
      gi_680 = 1;
   }
   return (0);
}

int waitForContext() {
   for (int l_count_0 = 0; IsTradeContextBusy() && l_count_0 < 20; l_count_0++) Sleep(15);
   if (l_count_0 >= 20) Print("Trade context is buisy more than ", DoubleToStr(15 * l_count_0 / 1000, 2), " seconds");
   else
      if (l_count_0 > 0) Print("Trade context was buisy ", DoubleToStr(15 * l_count_0 / 1000, 2), " seconds");
   return (l_count_0);
}

int openOrder(int a_cmd_0, double a_lots_4, double a_price_12, double a_price_20, double a_price_28, int a_magic_36, color a_color_40, bool ai_44) {
   int l_error_48;
   double l_price_52 = 0;
   double l_price_60 = 0;
   if (!ai_44) {
      l_price_52 = a_price_20;
      l_price_60 = a_price_28;
   }
   waitForContext();
   int l_ticket_68 = OrderSend(Symbol(), a_cmd_0, a_lots_4, a_price_12, gi_164 * gd_304, l_price_60, l_price_52, g_comment_168, a_magic_36, 0, a_color_40);
   if (l_ticket_68 > 0) {
      if (ai_44) {
         if (OrderSelect(l_ticket_68, SELECT_BY_TICKET)) {
            waitForContext();
            OrderModify(l_ticket_68, OrderOpenPrice(), a_price_28, a_price_20, 0, a_color_40);
         }
      }
      if (Send_Email_Alerts) SendMail(gs_340, "Open " + OpPrint(a_cmd_0) + ": [" + Symbol() + "] " + NormalizeDouble(a_price_12, Digits));
   } else {
      l_error_48 = GetLastError();
      if (!ai_44) return (openOrder(a_cmd_0, a_lots_4, a_price_12, a_price_20, a_price_28, a_magic_36, a_color_40, 1));
      Print(OpPrint(a_cmd_0) + " operation failed - error(", l_error_48, "): ", ErrorDescription(l_error_48));
   }
   return (l_ticket_68);
}

int closeOrder(int ai_0, color a_color_4) {
   double l_price_8;
   int l_error_16;
   for (int l_count_20 = 0; l_count_20 < 20; l_count_20++) {
      if (waitForContext() > 5) RefreshRates();
      if (ai_0 == 0) l_price_8 = Bid;
      else l_price_8 = Ask;
      if (OrderClose(OrderTicket(), OrderLots(), l_price_8, gi_164 * gd_304, a_color_4)) return (-1);
      l_error_16 = GetLastError();
      Print("Order close operation failed - error(", l_error_16, "): ", ErrorDescription(l_error_16));
      RefreshRates();
   }
   Print("Order close operation failed");
   return (OrderTicket());
}

double MMLots(double ad_0, double ad_8, int &ai_16) {
   return (NormalizeLots(ad_0 * ad_8 / MarketInfo(Symbol(), MODE_MARGINREQUIRED) / (AccountLeverage() / 100.0), ai_16));
}

double NormalizeLots(double ad_0, int &ai_8) {
   double l_lotstep_12 = MarketInfo(Symbol(), MODE_LOTSTEP);
   double l_minlot_20 = MarketInfo(Symbol(), MODE_MINLOT);
   double l_maxlot_28 = MarketInfo(Symbol(), MODE_MAXLOT);
   double ld_ret_36 = MathCeil(ad_0 / l_lotstep_12) * l_lotstep_12;
   ai_8 = 0;
   if (ld_ret_36 < l_minlot_20) {
      ld_ret_36 = l_minlot_20;
      ai_8 = -1;
   }
   if (ld_ret_36 > l_maxlot_28) {
      ld_ret_36 = l_maxlot_28;
      ai_8 = 1;
   }
   return (ld_ret_36);
}

void CountBalance(double ad_0) {
   gd_700 += ad_0;
   if (gd_708 < gd_700) gd_708 = gd_700;
}

double RecoveryLot(double ad_0) {
   int li_8;
   if (gd_708 > gd_700 && gi_784 > gi_792) return (NormalizeLots(2.0 * ad_0, li_8));
   gi_792 = gi_784;
   return (ad_0);
}

int RecoverTrades() {
   int l_count_0 = 0;
   for (int l_pos_4 = OrdersHistoryTotal() - 1; l_pos_4 >= 0; l_pos_4--) {
      if (OrderSelect(l_pos_4, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderMagicNumber() != g_magic_116 && OrderMagicNumber() != g_magic_120) continue;
         CountBalance(OrderProfit());
         l_count_0++;
      }
   }
   return (l_count_0);
}

int Recover(int a_magic_0, int a_cmd_4) {
   for (int l_pos_8 = OrdersTotal() - 1; l_pos_8 >= 0; l_pos_8--) {
      if (OrderSelect(l_pos_8, SELECT_BY_POS)) {
         if (OrderMagicNumber() == a_magic_0) {
            if (OrderSymbol() == Symbol())
               if (OrderType() == a_cmd_4) return (OrderTicket());
         }
      }
   }
   return (-1);
}

void RefreshOrders() {
   g_count_732 = 0;
   for (int l_pos_0 = OrdersTotal() - 1; l_pos_0 >= 0; l_pos_0--) {
      if (OrderSelect(l_pos_0, SELECT_BY_POS)) {
         if (OrderSymbol() == Symbol())
            if (OrderMagicNumber() != g_magic_116 && OrderMagicNumber() != g_magic_120) g_count_732++;
      }
   }
}

int FIFOrule() {
   return (g_count_732 <= 0 && g_ticket_736 < 0 && g_ticket_740 < 0 && g_ticket_760 < 0 && g_ticket_764 < 0);
}

int s1_direction() {
   if (g_icci_832 >= 0.0 || g_irsi_800 >= 50.0) g_datetime_932 = g_datetime_272;
   if (g_icci_832 <= 0.0 || g_irsi_800 <= 50.0) g_datetime_928 = g_datetime_272;
   if (g_datetime_932 > 0 && g_datetime_272 - g_datetime_932 > 3600.0 * gd_500) return (2);
   if (g_datetime_928 > 0 && g_datetime_272 - g_datetime_928 > 3600.0 * gd_500) return (3);
   if (g_datetime_932 == 0 || g_datetime_928 == 0) return (0);
   return (1);
}

void s1_dayRange() {
   int l_shift_0;
   if (g_datetime_272 - gi_288 < 3600.0 * gi_460) l_shift_0 = iBarShift(NULL, g_timeframe_372, gi_288 - 86400);
   else l_shift_0 = iBarShift(NULL, g_timeframe_372, gi_288);
   g_ihigh_872 = iHigh(NULL, g_timeframe_372, iHighest(NULL, g_timeframe_372, MODE_HIGH, l_shift_0 - gi_268, gi_268));
   g_ilow_880 = iLow(NULL, g_timeframe_372, iLowest(NULL, g_timeframe_372, MODE_LOW, l_shift_0 - gi_268, gi_268));
}

void s1_setRules() {
   int li_0;
   HideTestIndicators(TRUE);
   g_irsi_800 = iRSI(NULL, g_timeframe_372, g_period_404, PRICE_CLOSE, gi_268);
   g_irsi_808 = iRSI(NULL, g_timeframe_372, g_period_404, PRICE_CLOSE, gi_268 + 1);
   g_irsi_816 = iRSI(NULL, g_timeframe_372, g_period_404, PRICE_CLOSE, gi_268 + 2);
   if (gi_448) g_irsi_824 = iRSI(NULL, PERIOD_M1, g_period_408, PRICE_CLOSE, gi_268);
   g_icci_832 = iCCI(NULL, g_timeframe_372, g_period_412, PRICE_TYPICAL, gi_268);
   g_icci_840 = iCCI(NULL, g_timeframe_372, g_period_412, PRICE_TYPICAL, gi_268 + 1);
   g_icci_848 = iCCI(NULL, g_timeframe_372, g_period_412, PRICE_TYPICAL, gi_268 + 2);
   g_ima_856 = iMA(NULL, g_timeframe_372, g_period_412, 0, MODE_SMA, PRICE_MEDIAN, gi_268);
   if (gi_464) {
      if (g_irsi_800 >= 50 - gi_468 / 2 && g_irsi_800 <= gi_468 / 2 + 50) {
         gi_864 = TRUE;
         gi_868 = TRUE;
      }
   }
   if (gi_456) s1_dayRange();
   if (gi_496) {
      li_0 = gi_916;
      gi_916 = s1_direction();
      if (li_0 != gi_916) {
         gi_920 = li_0;
         if (gi_916 == 1) gi_924 = g_datetime_272 + 3600.0 * gd_508;
      }
   }
   if (gi_520 > 0) {
      if (g_spread_292 > gi_520 * gd_304) {
         if (g_spread_296 < g_spread_292) {
            Print("Strategy1: Safe spread limit exceeded: spread = ", g_spread_292);
            if (gi_524) Print("Strategy1: Using DayDirection filter");
         }
         gi_888 = TRUE;
      } else gi_888 = FALSE;
   }
   HideTestIndicators(FALSE);
   if (gi_888) {
      gi_908 = gi_540;
      gi_912 = gi_544;
      return;
   }
   gi_908 = gi_532;
   gi_912 = gi_536;
}

int s1_openBuyRule() {
   double l_iclose_0;
   double l_iclose_8;
   int l_shift_16;
   int l_shift_20;
   if (!gi_864) return (0);
   if (gi_888 && !gi_524) return (0);
   if (gi_496) {
      if (gi_916 == 2) return (0);
      if (g_datetime_272 <= gi_924)
         if (gi_920 == 2) return (0);
   }
   if (gi_516 || gi_888) {
      if (g_datetime_272 - gi_288 < 43200.0) {
         l_shift_16 = iBarShift(NULL, g_timeframe_372, gi_288 - 86400);
         l_shift_20 = iBarShift(NULL, g_timeframe_372, gi_288);
      } else {
         l_shift_16 = iBarShift(NULL, g_timeframe_372, gi_288);
         l_shift_20 = gi_268;
      }
      l_iclose_8 = iClose(NULL, g_timeframe_372, l_shift_16);
      l_iclose_0 = iClose(NULL, g_timeframe_372, l_shift_20);
      if (l_iclose_0 < l_iclose_8) return (0);
   }
   return (s1_Buy(Ask, g_icci_832, g_irsi_800, g_irsi_824, g_ima_856, gd_424, gd_440, gi_376 * gd_304 * Point, gi_452, gi_448));
}

int s1_openSellRule() {
   double l_iclose_0;
   double l_iclose_8;
   int l_shift_16;
   int l_shift_20;
   if (!gi_868) return (0);
   if (gi_888 && !gi_524) return (0);
   if (gi_496) {
      if (gi_916 == 3) return (0);
      if (g_datetime_272 <= gi_924)
         if (gi_920 == 3) return (0);
   }
   if (gi_516 || gi_888) {
      if (g_datetime_272 - gi_288 < 43200.0) {
         l_shift_16 = iBarShift(NULL, g_timeframe_372, gi_288 - 86400);
         l_shift_20 = iBarShift(NULL, g_timeframe_372, gi_288);
      } else {
         l_shift_16 = iBarShift(NULL, g_timeframe_372, gi_288);
         l_shift_20 = gi_268;
      }
      l_iclose_8 = iClose(NULL, g_timeframe_372, l_shift_16);
      l_iclose_0 = iClose(NULL, g_timeframe_372, l_shift_20);
      if (l_iclose_0 > l_iclose_8) return (0);
   }
   return (s1_Sell(Bid, g_icci_832, g_irsi_800, g_irsi_824, g_ima_856, gd_416, gd_432, gi_376 * gd_304 * Point, gi_452, gi_448));
}

bool s1_closeBuyRule() {
   if (gi_92 || OrderTakeProfit() == 0.0) {
      if (gi_376 > 0)
         if (NormalizeDouble(Bid - OrderOpenPrice(), Digits) >= NormalizeDouble(gi_376 * Point * gd_304, Digits)) return (TRUE);
   }
   if (OrderStopLoss() == 0.0) {
      if (gi_896 > 0)
         if (NormalizeDouble(OrderOpenPrice() - Ask, Digits) >= NormalizeDouble(gi_896 * Point * gd_304, Digits)) return (TRUE);
   }
   if (gi_476) {
      if (g_ticket_936 != OrderTicket()) {
         g_datetime_940 = OrderOpenTime();
         g_ticket_936 = OrderTicket();
      }
      if (g_icci_832 >= 0.0 || g_irsi_800 >= 50.0) g_datetime_940 = g_datetime_272;
      if (g_icci_848 < g_icci_840 && g_irsi_816 < g_irsi_808) g_datetime_940 = iTime(NULL, g_timeframe_372, gi_268);
      if (g_datetime_272 - g_datetime_940 > 3600.0 * gd_480 && OrderProfit() < 0.0) return (TRUE);
   }
   if (gi_472) {
      if (g_datetime_272 - OrderOpenTime() > 3600.0 * gd_480) {
         if (g_icci_832 > 0.0 && g_irsi_800 > 50.0 && OrderProfit() > 0.0) return (TRUE);
         if (g_datetime_272 - OrderOpenTime() > 3600.0 * gd_488) return (TRUE);
      }
   }
   return (FALSE);
}

bool s1_closeSellRule() {
   if (gi_92 || OrderTakeProfit() == 0.0) {
      if (gi_376 > 0)
         if (NormalizeDouble(OrderOpenPrice() - Ask, Digits) >= NormalizeDouble(gi_376 * Point * gd_304, Digits)) return (TRUE);
   }
   if (OrderStopLoss() == 0.0) {
      if (gi_904 > 0)
         if (NormalizeDouble(Bid - OrderOpenPrice(), Digits) >= NormalizeDouble(gi_904 * Point * gd_304, Digits)) return (TRUE);
   }
   if (gi_476) {
      if (g_ticket_944 != OrderTicket()) {
         g_datetime_948 = OrderOpenTime();
         g_ticket_944 = OrderTicket();
      }
      if (g_icci_832 <= 0.0 || g_irsi_800 <= 50.0) g_datetime_948 = g_datetime_272;
      if (g_icci_848 > g_icci_840 && g_irsi_816 > g_irsi_808) g_datetime_948 = iTime(NULL, g_timeframe_372, gi_268);
      if (g_datetime_272 - g_datetime_948 > 3600.0 * gd_480 && OrderProfit() < 0.0) return (TRUE);
   }
   if (gi_472) {
      if (g_datetime_272 - OrderOpenTime() > 3600.0 * gd_480) {
         if (g_icci_832 < 0.0 && g_irsi_800 < 50.0 && OrderProfit() > 0.0) return (TRUE);
         if (g_datetime_272 - OrderOpenTime() > 3600.0 * gd_488) return (TRUE);
      }
   }
   return (FALSE);
}

int s1_openBuy() {
   double ld_0 = 0;
   double ld_8 = 0;
   if (g_ilow_880 > 0.0) {
      gi_896 = (Bid - g_ilow_880 + Point * gd_304) / Point;
      if (gi_384 > 0 && gi_896 > gi_384 * gd_304) gi_896 = gi_384 * gd_304;
      if (gi_896 < gi_388 * gd_304) gi_896 = gi_388 * gd_304;
   } else gi_896 = gi_388 * gd_304;
   if (gi_896 < g_stoplevel_300) gi_896 = g_stoplevel_300;
   if (gi_92) gi_892 = gi_380 * gd_304;
   else gi_892 = gi_376 * gd_304;
   if (gi_892 < g_stoplevel_300) gi_892 = g_stoplevel_300;
   ld_8 = NormalizeDouble(Bid - gi_896 * Point, Digits);
   ld_0 = NormalizeDouble(Ask + gi_892 * Point, Digits);
   return (openOrder(OP_BUY, gd_312, Ask, ld_0, ld_8, g_magic_116, gi_396, 0));
}

int s1_openSell() {
   double ld_0 = 0;
   double ld_8 = 0;
   if (g_ihigh_872 > 0.0) {
      gi_904 = (g_ihigh_872 - Ask + Point * gd_304) / Point;
      if (gi_384 > 0 && gi_904 > gi_384 * gd_304) gi_904 = gi_384 * gd_304;
      if (gi_904 < gi_388 * gd_304) gi_904 = gi_388 * gd_304;
   } else gi_904 = gi_388 * gd_304;
   if (gi_904 < g_stoplevel_300) gi_904 = g_stoplevel_300;
   if (gi_92) gi_900 = gi_380 * gd_304;
   else gi_900 = gi_376 * gd_304;
   if (gi_900 < g_stoplevel_300) gi_900 = g_stoplevel_300;
   ld_8 = NormalizeDouble(Ask + gi_904 * Point, Digits);
   ld_0 = NormalizeDouble(Bid - gi_900 * Point, Digits);
   return (openOrder(OP_SELL, gd_312, Bid, ld_0, ld_8, g_magic_116, gi_400, 0));
}

int s1_buyControl() {
   int li_ret_0;
   double l_ord_takeprofit_4 = OrderTakeProfit();
   double l_ord_stoploss_12 = OrderStopLoss();
   if (l_ord_takeprofit_4 == 0.0 || l_ord_stoploss_12 == 0.0) {
      if (l_ord_takeprofit_4 == 0.0) {
         if (gi_892 < g_stoplevel_300) gi_892 = g_stoplevel_300;
         l_ord_takeprofit_4 = NormalizeDouble(Ask + gi_892 * Point, Digits);
      }
      if (l_ord_stoploss_12 == 0.0) {
         if (gi_896 < g_stoplevel_300) gi_896 = g_stoplevel_300;
         l_ord_stoploss_12 = NormalizeDouble(Bid - gi_896 * Point, Digits);
      }
      waitForContext();
      OrderModify(OrderTicket(), OrderOpenPrice(), l_ord_stoploss_12, l_ord_takeprofit_4, 0, Green);
   }
   if (s1_closeBuyRule()) {
      li_ret_0 = closeOrder(0, Violet);
      if (li_ret_0 < 0) return (li_ret_0);
   }
   if (gi_392 > 0) {
      if (Bid - OrderOpenPrice() > Point * gd_304 * gi_392) {
         if (OrderStopLoss() < Bid - Point * gd_304 * gi_392 || OrderStopLoss() == 0.0) {
            waitForContext();
            OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(Bid - Point * gd_304 * gi_392, Digits), OrderTakeProfit(), 0, Green);
         }
      }
   }
   return (OrderTicket());
}

int s1_sellControl() {
   int li_ret_0;
   double l_ord_takeprofit_4 = OrderTakeProfit();
   double l_ord_stoploss_12 = OrderStopLoss();
   if (l_ord_takeprofit_4 == 0.0 || l_ord_stoploss_12 == 0.0) {
      if (l_ord_takeprofit_4 == 0.0) {
         if (gi_900 < g_stoplevel_300) gi_900 = g_stoplevel_300;
         l_ord_takeprofit_4 = NormalizeDouble(Bid - gi_900 * Point, Digits);
      }
      if (l_ord_stoploss_12 == 0.0) {
         if (gi_904 < g_stoplevel_300) gi_904 = g_stoplevel_300;
         l_ord_stoploss_12 = NormalizeDouble(Ask + gi_904 * Point, Digits);
      }
      waitForContext();
      OrderModify(OrderTicket(), OrderOpenPrice(), l_ord_stoploss_12, l_ord_takeprofit_4, 0, Red);
   }
   if (s1_closeSellRule()) {
      li_ret_0 = closeOrder(1, Violet);
      if (li_ret_0 < 0) return (li_ret_0);
   }
   if (gi_392 > 0) {
      if (OrderOpenPrice() - Ask > Point * gd_304 * gi_392) {
         if (OrderStopLoss() > Ask + Point * gd_304 * gi_392 || OrderStopLoss() == 0.0) {
            waitForContext();
            OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(Ask + Point * gd_304 * gi_392, Digits), OrderTakeProfit(), 0, Red);
         }
      }
   }
   return (OrderTicket());
}

void run_Strategy1() {
   int l_day_of_week_0;
   gi_720 = TRUE;
   if (g_ticket_736 == -2) {
      g_ticket_736 = Recover(g_magic_116, OP_BUY);
      if (g_ticket_736 >= 0) {
         OrderSelect(g_ticket_736, SELECT_BY_TICKET);
         OrderPrint();
         Print("Strategy1: Order found:");
      }
   }
   if (g_ticket_740 == -2) {
      g_ticket_740 = Recover(g_magic_116, OP_SELL);
      if (g_ticket_740 >= 0) {
         OrderSelect(g_ticket_740, SELECT_BY_TICKET);
         OrderPrint();
         Print("Strategy1: Order found:");
      }
   }
   s1_setRules();
   if ((gi_908 < gi_912 && (g_hour_280 >= gi_908 && g_hour_280 <= gi_912 - 1)) || (gi_908 >= gi_912 && g_hour_280 >= gi_908 || g_hour_280 <= gi_912 - 1)) gi_720 = TRUE;
   else gi_720 = FALSE;
   if (gi_720 && gi_528) {
      l_day_of_week_0 = TimeDayOfWeek(gi_276);
      if ((l_day_of_week_0 == 5 && g_hour_280 >= gi_908) || (l_day_of_week_0 == 1 && gi_908 >= gi_912 && g_hour_280 <= gi_912 - 1)) gi_720 = FALSE;
      else
         if (l_day_of_week_0 > 5 || l_day_of_week_0 < 1) gi_720 = FALSE;
   }
   if (gi_952 != gi_720) {
      if (gi_720) gi_784++;
      gi_952 = gi_720;
   }
   if (g_ticket_736 >= 0) {
      if (OrderSelect(g_ticket_736, SELECT_BY_TICKET)) {
         if (OrderCloseTime() == 0) g_ticket_736 = s1_buyControl();
         else g_ticket_736 = -1;
         g_ord_profit_744 = OrderProfit();
         if (g_ticket_736 < 0) CountBalance(g_ord_profit_744);
      } else {
         g_ticket_736 = -2;
         g_ord_profit_744 = 0;
      }
   }
   if (g_ticket_740 >= 0) {
      if (OrderSelect(g_ticket_740, SELECT_BY_TICKET)) {
         if (OrderCloseTime() == 0) g_ticket_740 = s1_sellControl();
         else g_ticket_740 = -1;
         g_ord_profit_752 = OrderProfit();
         if (g_ticket_740 < 0) CountBalance(g_ord_profit_752);
      } else {
         g_ticket_740 = -2;
         g_ord_profit_752 = 0;
      }
   }
   int li_4 = s1_openBuyRule();
   int li_8 = s1_openSellRule();
   if (!gi_720 || !gi_728 || gi_716) return;
   if (Hedge_Allowed && !FIFOrule()) return;
   if (g_datetime_956 != iTime(NULL, g_timeframe_372, gi_268) && li_4 && g_ticket_736 < 0) {
      g_ticket_736 = s1_openBuy();
      if (g_ticket_736 < 0) return;
      g_datetime_956 = iTime(NULL, g_timeframe_372, gi_268);
      if (gi_464) {
         gi_864 = FALSE;
         gi_868 = TRUE;
      }
      gi_796++;
      return;
   }
   if (g_datetime_960 != iTime(NULL, g_timeframe_372, gi_268) && li_8 && g_ticket_740 < 0) {
      g_ticket_740 = s1_openSell();
      if (g_ticket_740 >= 0) {
         g_datetime_960 = iTime(NULL, g_timeframe_372, gi_268);
         if (gi_464) {
            gi_864 = TRUE;
            gi_868 = FALSE;
         }
         gi_796++;
      }
   }
}

void s2_setRules() {
   HideTestIndicators(TRUE);
   if (gi_600 || gi_608) g_icci_968 = iCCI(NULL, g_timeframe_548, g_period_592, PRICE_TYPICAL, gi_268);
   if (gi_604) g_icci_976 = iCCI(NULL, g_timeframe_548, g_period_596, PRICE_TYPICAL, gi_268);
   g_ihigh_984 = iHigh(NULL, g_timeframe_548, iHighest(NULL, g_timeframe_548, MODE_HIGH, gi_588, 1));
   g_ilow_992 = iLow(NULL, g_timeframe_548, iLowest(NULL, g_timeframe_548, MODE_LOW, gi_588, 1));
   if (gi_644 > 0) {
      if (g_spread_292 > gi_644 * gd_304) {
         if (g_spread_296 < g_spread_292) {
            Print("Strategy2: Safe spread limit exceeded: spread = ", g_spread_292);
            if (gi_648) Print("Strategy2: Using DayDirection filter");
         }
         gi_1016 = TRUE;
      } else gi_1016 = FALSE;
   }
   HideTestIndicators(TRUE);
   if (gi_1016) {
      gi_1036 = gi_664;
      gi_1040 = gi_668;
      return;
   }
   gi_1036 = gi_656;
   gi_1040 = gi_660;
}

int s2_openBuyRule() {
   double l_iclose_0;
   double l_iclose_8;
   int l_shift_16;
   int l_shift_20;
   if (gi_1016 && !gi_648) return (0);
   if (gi_640 || gi_1016) {
      if (g_datetime_272 - gi_288 < 43200.0) {
         l_shift_16 = iBarShift(NULL, g_timeframe_548, gi_288 - 86400);
         l_shift_20 = iBarShift(NULL, g_timeframe_548, gi_288);
      } else {
         l_shift_16 = iBarShift(NULL, g_timeframe_548, gi_288);
         l_shift_20 = gi_268;
      }
      l_iclose_8 = iClose(NULL, g_timeframe_548, l_shift_16);
      l_iclose_0 = iClose(NULL, g_timeframe_548, l_shift_20);
      if (l_iclose_0 < l_iclose_8) return (0);
   }
   return (s2_Buy(Ask, Bid, g_icci_968, g_icci_976, g_ilow_992, g_ihigh_984, gi_600, gi_604));
}

int s2_openSellRule() {
   double l_iclose_0;
   double l_iclose_8;
   int l_shift_16;
   int l_shift_20;
   if (gi_1016 && !gi_648) return (0);
   if (gi_640 || gi_1016) {
      if (g_datetime_272 - gi_288 < 43200.0) {
         l_shift_16 = iBarShift(NULL, g_timeframe_548, gi_288 - 86400);
         l_shift_20 = iBarShift(NULL, g_timeframe_548, gi_288);
      } else {
         l_shift_16 = iBarShift(NULL, g_timeframe_548, gi_288);
         l_shift_20 = gi_268;
      }
      l_iclose_8 = iClose(NULL, g_timeframe_548, l_shift_16);
      l_iclose_0 = iClose(NULL, g_timeframe_548, l_shift_20);
      if (l_iclose_0 > l_iclose_8) return (0);
   }
   return (s2_Sell(Ask, Bid, g_icci_968, g_icci_976, g_ilow_992, g_ihigh_984, gi_600, gi_604));
}

bool s2_closeBuyRule() {
   double l_ord_profit_0;
   if (gi_92 || OrderTakeProfit() == 0.0) {
      if (gi_552 > 0)
         if (NormalizeDouble(Bid - OrderOpenPrice(), Digits) >= NormalizeDouble(gi_552 * Point * gd_304, Digits)) return (TRUE);
   }
   if (OrderStopLoss() == 0.0) {
      if (gi_1024 > 0)
         if (NormalizeDouble(OrderOpenPrice() - Ask, Digits) >= NormalizeDouble(gi_1024 * Point * gd_304, Digits)) return (TRUE);
   }
   if (gi_608) {
      if (g_ticket_1044 != OrderTicket()) {
         gi_1048 = 0;
         gi_1052 = 0;
         g_datetime_1060 = OrderOpenTime();
         g_datetime_1056 = g_datetime_1060;
         g_ticket_1044 = OrderTicket();
         g_ord_open_price_1064 = OrderOpenPrice();
      }
      l_ord_profit_0 = OrderProfit();
      if (Ask > g_ord_open_price_1064) {
         gi_1048 += g_datetime_272 - g_datetime_1056;
         g_datetime_1056 = g_datetime_272;
      } else {
         gi_1052 += g_datetime_272 - g_datetime_1056;
         g_datetime_1056 = g_datetime_272;
      }
      if (g_datetime_272 - g_datetime_1060 > 3600.0 * gd_612) {
         if (g_icci_968 > 0.0 && l_ord_profit_0 > 0.0 && gi_1048 < gi_1052) return (TRUE);
         if (g_icci_968 > 100.0 && l_ord_profit_0 > 0.0) return (TRUE);
         if (g_datetime_272 - g_datetime_1060 > 3600.0 * gd_620 && l_ord_profit_0 > 0.0) return (TRUE);
         if (g_datetime_272 - g_datetime_1060 > 3600.0 * gd_628) return (TRUE);
      }
   }
   if (gi_636) return (Bid >= g_ihigh_984);
   return (Bid >= g_ihigh_1000);
}

bool s2_closeSellRule() {
   double l_ord_profit_0;
   if (gi_92 || OrderTakeProfit() == 0.0) {
      if (gi_552 > 0)
         if (NormalizeDouble(OrderOpenPrice() - Ask, Digits) >= NormalizeDouble(gi_552 * Point * gd_304, Digits)) return (TRUE);
   }
   if (OrderStopLoss() == 0.0) {
      if (gi_1032 > 0)
         if (NormalizeDouble(Bid - OrderOpenPrice(), Digits) >= NormalizeDouble(gi_1032 * Point * gd_304, Digits)) return (TRUE);
   }
   if (gi_608) {
      if (g_ticket_1072 != OrderTicket()) {
         gi_1076 = 0;
         gi_1080 = 0;
         g_datetime_1088 = OrderOpenTime();
         g_datetime_1084 = g_datetime_1088;
         g_ticket_1072 = OrderTicket();
         g_ord_open_price_1092 = OrderOpenPrice();
      }
      l_ord_profit_0 = OrderProfit();
      if (Bid < g_ord_open_price_1092) {
         gi_1076 += g_datetime_272 - g_datetime_1084;
         g_datetime_1084 = g_datetime_272;
      } else {
         gi_1080 += g_datetime_272 - g_datetime_1084;
         g_datetime_1084 = g_datetime_272;
      }
      if (g_datetime_272 - g_datetime_1088 > 3600.0 * gd_612) {
         if (g_icci_968 < 0.0 && l_ord_profit_0 > 0.0 && gi_1076 < gi_1080) return (TRUE);
         if (g_icci_968 < -100.0 && l_ord_profit_0 > 0.0) return (TRUE);
         if (g_datetime_272 - g_datetime_1088 > 3600.0 * gd_620 && l_ord_profit_0 > 0.0) return (TRUE);
         if (g_datetime_272 - g_datetime_1088 > 3600.0 * gd_628) return (TRUE);
      }
   }
   if (gi_636) return (Ask <= g_ilow_992);
   return (Ask <= g_ilow_1008);
}

int s2_openBuy() {
   double ld_0 = 0;
   double ld_8 = 0;
   if (gd_568 > 0.0) {
      gi_1024 = gd_568 * (g_ihigh_984 - g_ilow_992) / Point;
      if (gi_560 > 0 && gi_1024 > gi_560 * gd_304) gi_1024 = gi_560 * gd_304;
      if (gi_1024 < gi_564 * gd_304) gi_1024 = gi_564 * gd_304;
   } else gi_1024 = gi_564 * gd_304;
   if (gi_1024 < g_stoplevel_300) gi_1024 = g_stoplevel_300;
   if (gi_92) gi_1020 = gi_556 * gd_304;
   else gi_1020 = gi_552 * gd_304;
   if (gi_1020 < g_stoplevel_300) gi_1020 = g_stoplevel_300;
   ld_8 = NormalizeDouble(Bid - gi_1024 * Point, Digits);
   ld_0 = NormalizeDouble(Ask + gi_1020 * Point, Digits);
   return (openOrder(OP_BUY, gd_312, Ask, ld_0, ld_8, g_magic_120, gi_580, 0));
}

int s2_openSell() {
   double ld_0 = 0;
   double ld_8 = 0;
   if (gd_568 > 0.0) {
      gi_1032 = gd_568 * (g_ihigh_984 - g_ilow_992) / Point;
      if (gi_560 > 0 && gi_1032 > gi_560 * gd_304) gi_1032 = gi_560 * gd_304;
      if (gi_1032 < gi_564 * gd_304) gi_1032 = gi_564 * gd_304;
   } else gi_1032 = gi_564 * gd_304;
   if (gi_1032 < g_stoplevel_300) gi_1032 = g_stoplevel_300;
   if (gi_92) gi_1028 = gi_556 * gd_304;
   else gi_1028 = gi_552 * gd_304;
   if (gi_1028 < g_stoplevel_300) gi_1028 = g_stoplevel_300;
   ld_8 = NormalizeDouble(Ask + gi_1032 * Point, Digits);
   ld_0 = NormalizeDouble(Bid - gi_1028 * Point, Digits);
   return (openOrder(OP_SELL, gd_312, Bid, ld_0, ld_8, g_magic_120, gi_584, 0));
}

int s2_buyControl() {
   int li_ret_0;
   double l_ord_takeprofit_4 = OrderTakeProfit();
   double l_ord_stoploss_12 = OrderStopLoss();
   if (l_ord_takeprofit_4 == 0.0 || l_ord_stoploss_12 == 0.0) {
      if (l_ord_takeprofit_4 == 0.0) {
         if (gi_1020 < g_stoplevel_300) gi_1020 = g_stoplevel_300;
         l_ord_takeprofit_4 = NormalizeDouble(Ask + gi_1020 * Point, Digits);
      }
      if (l_ord_stoploss_12 == 0.0) {
         if (gi_1024 < g_stoplevel_300) gi_1024 = g_stoplevel_300;
         l_ord_stoploss_12 = NormalizeDouble(Bid - gi_1024 * Point, Digits);
      }
      waitForContext();
      OrderModify(OrderTicket(), OrderOpenPrice(), l_ord_stoploss_12, l_ord_takeprofit_4, 0, Green);
   }
   if (s2_closeBuyRule()) {
      li_ret_0 = closeOrder(0, Violet);
      if (li_ret_0 < 0) return (li_ret_0);
   }
   if (gi_576 > 0) {
      if (Bid - OrderOpenPrice() > Point * gd_304 * gi_576) {
         if (OrderStopLoss() < Bid - Point * gd_304 * gi_576 || OrderStopLoss() == 0.0) {
            waitForContext();
            OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(Bid - Point * gd_304 * gi_576, Digits), OrderTakeProfit(), 0, Green);
         }
      }
   }
   return (OrderTicket());
}

int s2_sellControl() {
   int li_ret_0;
   double l_ord_takeprofit_4 = OrderTakeProfit();
   double l_ord_stoploss_12 = OrderStopLoss();
   if (l_ord_takeprofit_4 == 0.0 || l_ord_stoploss_12 == 0.0) {
      if (l_ord_takeprofit_4 == 0.0) {
         if (gi_1028 < g_stoplevel_300) gi_1028 = g_stoplevel_300;
         l_ord_takeprofit_4 = NormalizeDouble(Bid - gi_1028 * Point, Digits);
      }
      if (l_ord_stoploss_12 == 0.0) {
         if (gi_1032 < g_stoplevel_300) gi_1032 = g_stoplevel_300;
         l_ord_stoploss_12 = NormalizeDouble(Ask + gi_1032 * Point, Digits);
      }
      waitForContext();
      OrderModify(OrderTicket(), OrderOpenPrice(), l_ord_stoploss_12, l_ord_takeprofit_4, 0, Red);
   }
   if (s2_closeSellRule()) {
      li_ret_0 = closeOrder(1, Violet);
      if (li_ret_0 < 0) return (li_ret_0);
   }
   if (gi_576 > 0) {
      if (OrderOpenPrice() - Ask > Point * gd_304 * gi_576) {
         if (OrderStopLoss() > Ask + Point * gd_304 * gi_576 || OrderStopLoss() == 0.0) {
            waitForContext();
            OrderModify(OrderTicket(), OrderOpenPrice(), NormalizeDouble(Ask + Point * gd_304 * gi_576, Digits), OrderTakeProfit(), 0, Red);
         }
      }
   }
   return (OrderTicket());
}

void run_Strategy2() {
   int l_day_of_week_0;
   gi_724 = TRUE;
   if (g_ticket_760 == -2) {
      g_ticket_760 = Recover(g_magic_120, OP_BUY);
      if (g_ticket_760 >= 0) {
         OrderSelect(g_ticket_760, SELECT_BY_TICKET);
         OrderPrint();
         Print("Strategy2: Order found:");
      }
   }
   if (g_ticket_764 == -2) {
      g_ticket_764 = Recover(g_magic_120, OP_SELL);
      if (g_ticket_764 >= 0) {
         OrderSelect(g_ticket_764, SELECT_BY_TICKET);
         OrderPrint();
         Print("Strategy2: Order found:");
      }
   }
   s2_setRules();
   if ((gi_1036 < gi_1040 && (g_hour_280 >= gi_1036 && g_hour_280 <= gi_1040 - 1)) || (gi_1036 >= gi_1040 && g_hour_280 >= gi_1036 || g_hour_280 <= gi_1040 - 1)) gi_724 = TRUE;
   else gi_724 = FALSE;
   if (gi_724 && gi_652) {
      l_day_of_week_0 = TimeDayOfWeek(gi_276);
      if ((l_day_of_week_0 == 5 && g_hour_280 >= gi_1036) || (l_day_of_week_0 == 1 && gi_1036 >= gi_1040 && g_hour_280 <= gi_1040 - 1)) gi_724 = FALSE;
      else
         if (l_day_of_week_0 > 5 || l_day_of_week_0 < 1) gi_724 = FALSE;
   }
   if (gi_1100 != gi_724) {
      if (gi_724) {
         g_ord_profit_768 = 0;
         g_ord_profit_776 = 0;
         gi_788++;
      }
      gi_1100 = gi_724;
   }
   if (g_ticket_760 >= 0) {
      if (OrderSelect(g_ticket_760, SELECT_BY_TICKET)) {
         if (OrderCloseTime() == 0) g_ticket_760 = s2_buyControl();
         else g_ticket_760 = -1;
         g_ord_profit_768 = OrderProfit();
         if (g_ticket_760 < 0) CountBalance(g_ord_profit_768);
      } else {
         g_ticket_760 = -2;
         g_ord_profit_768 = 0;
      }
   }
   if (g_ticket_764 >= 0) {
      if (OrderSelect(g_ticket_764, SELECT_BY_TICKET)) {
         if (OrderCloseTime() == 0) g_ticket_764 = s2_sellControl();
         else g_ticket_764 = -1;
         g_ord_profit_776 = OrderProfit();
         if (g_ticket_764 < 0) CountBalance(g_ord_profit_776);
      } else {
         g_ticket_764 = -2;
         g_ord_profit_776 = 0;
      }
   }
   int li_4 = s2_openBuyRule();
   int li_8 = s2_openSellRule();
   if (!gi_724 || !gi_728 || gi_716) return;
   if (Hedge_Allowed && !FIFOrule()) return;
   if (g_datetime_1104 != iTime(NULL, g_timeframe_548, gi_268) && li_4 && g_ticket_760 < 0 && g_ord_profit_768 >= 0.0) {
      g_ticket_760 = s2_openBuy();
      if (g_ticket_760 < 0) return;
      g_datetime_1104 = iTime(NULL, g_timeframe_548, gi_268);
      g_ihigh_1000 = g_ihigh_984;
      g_ilow_1008 = g_ilow_992;
      g_ord_profit_776 = 0;
      gi_964++;
      return;
   }
   if (g_datetime_1108 != iTime(NULL, g_timeframe_548, gi_268) && li_8 && g_ticket_764 < 0 && g_ord_profit_776 >= 0.0) {
      g_ticket_764 = s2_openSell();
      if (g_ticket_764 >= 0) {
         g_datetime_1108 = iTime(NULL, g_timeframe_548, gi_268);
         g_ihigh_1000 = g_ihigh_984;
         g_ilow_1008 = g_ilow_992;
         g_ord_profit_768 = 0;
         gi_964++;
      }
   }
}

void Refresh(bool ai_0) {
   double lda_4[1];
   if (ai_0) RefreshRates();
   g_datetime_272 = TimeCurrent();
   if (!IsTesting() && gi_112 || gi_108) {
      gi_336 = 4;
      if (gi_336 == 4 && !gi_108) gi_336 = 0;
      else gd_100 = GetGmtOffset();
   }
   gi_276 = g_datetime_272 - 3600.0 * gd_100;
   g_hour_280 = TimeHour(gi_276);
   gi_288 = g_datetime_272 - 3600.0 * g_hour_280 - 60 * TimeMinute(gi_276) - TimeSeconds(gi_276);
   g_spread_292 = MarketInfo(Symbol(), MODE_SPREAD);
   g_stoplevel_300 = MarketInfo(Symbol(), MODE_STOPLEVEL);
   gd_304 = 0.0001 / Point;
   if (Digits < 4) gd_304 = 100.0 * gd_304;
}

string CPrint(bool ai_0, string as_4, string as_12 = "") {
   if (ai_0) return (as_4);
   return (as_12);
}

string OpPrint(int ai_0) {
   switch (ai_0) {
   case 0:
      return ("Buy");
   case 1:
      return ("Sell");
   }
   return ("Order");
}

string GMPrint(int ai_0) {
   switch (ai_0) {
   case 1:
      return ("automatic: server");
   case 2:
      return ("automatic: server");
   case 4:
      return ("automatic: local");
   }
   return ("manual");
}

string DPrint(int ai_0) {
   switch (ai_0) {
   case 1:
      return ("Correction");
   case 3:
      return ("Upward Impulse");
   case 2:
      return ("Downward Impulse");
   }
   return ("");
}

string PPrint(int ai_0) {
   int li_4 = MathMod(ai_0, 5);
   return (gsa_1112[li_4]);
}

void PrintResponse(int ai_0, int ai_4 = -1, int ai_8 = -1) {
   if (ai_4 == -1) ai_4 = gi_676;
   if (ai_8 == -1) ai_8 = gi_672;
   gi_676 = ai_4;
   gi_672 = ai_8;
   if (ai_0 & 16384 > 0) PrintLN("Thanks for choosing FX Retribution Infinity Pro", gi_148);
   else PrintLN("Authentication failed - error(" + ai_0 + ")", gi_148);
   if (ai_0 & 512 > 0) PrintLN("Attention: Upgrade available", gi_148);
   if (ai_0 & 1024 > 0) PrintLN("Error: Upgrade required", gi_148);
   if (ai_0 & 1 > 0) PrintLN("Error: WinINet initialisation failed", gi_148);
   if (ai_0 & 2 > 0) PrintLN("Error: WinINet connection failed", gi_148);
   if (ai_0 & 4 > 0) PrintLN("Error: Invalid account number", gi_148);
   if (ai_0 & 8 > 0) PrintLN("Error: Invalid account status", gi_148);
   if (ai_0 & 16 > 0) PrintLN("Error: Dll and Expert versions mismatch", gi_148);
   if (ai_0 & 128 > 0) PrintLN("Error: Unable to retrieve authentication code", gi_148);
   if (ai_0 & 256 > 0) PrintLN("Error: Server response failure", gi_148);
   if (ai_0 & 2048 > 0) PrintLN("Error: Invalid authorisation details", gi_148);
   if (ai_0 & 4096 > 0) PrintLN("Error: Authorisation declined", gi_148);
}

string GetObjName(int ai_0) {
   return (StringConcatenate("Forex EA", ai_0));
}

void GetPos(int ai_0, int &ai_4, int &ai_8) {
   string l_name_12 = GetObjName(ai_0);
   if (ObjectFind(l_name_12) == 0) {
      ai_4 = ObjectGet(l_name_12, OBJPROP_XDISTANCE);
      ai_8 = ObjectGet(l_name_12, OBJPROP_YDISTANCE);
   }
}

void PrintLN(string a_text_0, color a_color_8 = -1, int ai_12 = -1, double ad_16 = -1.0, int ai_24 = 0) {
   if (a_color_8 == CLR_NONE) a_color_8 = gi_148;
   if (ai_12 == -1) ai_12 = gi_676;
   if (ad_16 == -1.0) ad_16 = gi_672;
   string l_name_28 = GetObjName(ai_12);
   if (ObjectFind(l_name_28) != 0) {
      ObjectCreate(l_name_28, OBJ_LABEL, 0, 0, 0);
      ObjectSet(l_name_28, OBJPROP_CORNER, 0);
   }
   ObjectSetText(l_name_28, a_text_0, 8, "Tahoma", a_color_8);
   ObjectSet(l_name_28, OBJPROP_XDISTANCE, gi_688 + ai_24);
   ObjectSet(l_name_28, OBJPROP_YDISTANCE, gi_684 + 14.0 * ad_16);
   if (gi_672 < ad_16 + 1.0) gi_672 = ad_16 + 1.0;
   if (gi_676 < ai_12 + 1) gi_676 = ai_12 + 1;
   if (gi_680 < ai_12) gi_680 = ai_12;
}

void PrintSep(int ai_0 = -1, double ad_4 = -1.0, int ai_12 = 0) {
   if (ai_0 == -1) ai_0 = gi_676;
   if (ad_4 == -1.0) ad_4 = gi_672;
   PrintLN("_______", gi_152, ai_0, ad_4 - 0.3, ai_12);
   if (gi_672 < ad_4 + 1.0) gi_672 = ad_4 + 1.0;
}

void Deleteobjects(int ai_0, int ai_4) {
   for (int li_8 = ai_0; li_8 <= ai_4; li_8++) ObjectDelete(GetObjName(li_8));
}

int start() {
   int li_0;
   int li_4;
   if (!gi_252 && !gi_256) return (0);
   if (Bars < 100) {
      Print("Bars less than 100");
      return (0);
   }
   if (gi_328) {
      gi_328 = FALSE;
      li_0 = RecoverTrades();
      Print("Orders in history: ", li_0, " profit made: ", DoubleToStr(gd_700, 2));
   }
   if (gi_228 && Risk_Percentage > 0.0) {
      if (gi_248) while (AccountBalance() < gd_320 / (gd_240 + 1.0)) gd_320 /= (gd_240 + 1.0);
      while (AccountBalance() > gd_320) gd_320 *= (gd_240 + 1.0);
      gd_312 = MMLots(Risk_Percentage, gd_320, li_4);
   } else {
      if (Risk_Percentage > 0.0) {
         gd_312 = MMLots(Risk_Percentage, AccountFreeMargin(), li_4);
         if (Recover_Bad_Trades) gd_312 = RecoveryLot(gd_312);
      } else gd_312 = NormalizeLots(Default_Lot_Size, li_4);
   }
   double ld_8 = NormalizeDouble(MarketInfo(Symbol(), MODE_MARGINREQUIRED) * gd_312, 8);
   g_spread_296 = g_spread_292;
   Refresh(0);
   gi_716 = NormalizeDouble(AccountFreeMargin(), 8) < ld_8;
   gi_728 = IsTradeTime(Symbol(), TimeYear(gi_276), TimeMonth(gi_276), TimeDay(gi_276), gi_260);
   if (Hedge_Allowed) RefreshOrders();
   if (gi_252) run_Strategy1();
   Refresh(1);
   gi_716 = NormalizeDouble(AccountFreeMargin(), 8) < ld_8;
   if (gi_256) run_Strategy2();
   GetPos(0, gi_688, gi_684);
   gi_676 = 0;
   gi_672 = 0;
   gs_340 = ">>Welcome " + AccountName() + " <<";
   PrintLN(gs_340, gi_152);
   PrintLN("--------------------------");
   PrintResponse(gi_332);
   PrintLN("--------------------------");
   string ls_16 = DoubleToStr(gd_100, 1);
   if (!IsTesting()) ls_16 = StringConcatenate(ls_16, " (", GMPrint(gi_336), ")");
   PrintLN("+Accounts+");
   PrintLN("--------------------------");
   PrintLN("Account Free Margin: " + AccountFreeMargin() + AccountCurrency());
   PrintLN("Using Leverage upto: " + AccountLeverage() + ":1");
   PrintLN("Net Capital: " + AccountBalance() + AccountCurrency());
   if (gi_1132 != gi_716) {
      if (gi_716) Print("Not enough money! Available margin = ", DoubleToStr(AccountFreeMargin(), 2), ", Required margin = ", DoubleToStr(ld_8, 2));
      gi_1132 = gi_716;
   }
   if (gi_716) {
      PrintSep();
      PrintLN("Not enough money!");
      PrintLN("Available margin =");
      PrintLN(DoubleToStr(AccountFreeMargin(), 2), gi_152, gi_676, gi_672 - 1, 90);
      PrintLN("Required margin =");
      PrintLN(DoubleToStr(ld_8, 2), gi_152, gi_676, gi_672 - 1, 90);
   }
   if (IsTesting()) PrintLN("Backtesting");
   else PrintLN("--------------------------");
   PrintLN("+Trading Status+");
   PrintLN("--------------------------");
   PrintLN("System Status: " + "Online");
   if (gi_252 && gi_496) {
      if (gi_916 == 0) PrintLN("Waiting for High Probability Trade!");
      else PrintLN(DPrint(gi_916) + " detected");
      if (g_datetime_272 <= gi_924 && gi_916 != gi_920 && gi_920 != 0) PrintLN(DPrint(gi_920) + " fading: " + TimeToStr(gi_924 - g_datetime_272, TIME_SECONDS));
   } else PrintLN(CPrint(gi_720 || gi_724, "Running", "Activating Data"));
   if (Hedge_Allowed && g_count_732 > 0) {
      PrintSep();
      PrintLN("Wait for open trades to close: ");
      PrintLN(g_count_732, gi_152, gi_676, gi_672 - 1, 125);
   }
   if (g_ticket_736 >= 0 || g_ticket_740 >= 0 || g_ticket_760 >= 0 || g_ticket_740 >= 0) {
      PrintSep();
      if (g_ticket_736 >= 0) PrintLN("A Buy trade is on progress");
      if (g_ticket_740 >= 0) PrintLN("A Sell trade is on progress");
      if (g_ticket_760 >= 0) PrintLN("A Buy trade is on progress");
      if (g_ticket_764 >= 0) PrintLN("A Sell trade is on progress");
   }
   PrintLN("--------------------------");
   Deleteobjects(gi_676, gi_680);
   gi_680 = gi_676 - 1;
   ObjectsRedraw();
   return (0);
}

int s1_Buy(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32, double ad_40, double ad_48, double ad_56, bool ai_64, bool ai_68) {
   if (ad_8 < 0.0) {
      if (ai_64)
         if (ad_32 - ad_0 < ad_56) return (0);
      if (ad_40 > ad_16) return (1);
      if (ai_68)
         if (ad_48 > ad_24 && ad_16 < 50.0) return (1);
   }
   return (0);
}

int s1_Sell(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32, double ad_40, double ad_48, double ad_56, bool ai_64, bool ai_68) {
   if (ad_8 > 0.0) {
      if (ai_64)
         if (ad_0 - ad_32 < ad_56) return (0);
      if (ad_40 < ad_16) return (1);
      if (ai_68)
         if (ad_48 < ad_24 && ad_16 > 50.0) return (1);
   }
   return (0);
}

int s2_Buy(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32, double ad_40, bool ai_48, bool ai_52) {
   if (ad_32 < ad_0) return (0);
   if (ai_48)
      if (ad_16 >= 0.0) return (0);
   if (ai_52)
      if (ad_24 < ad_16) return (0);
   if (ad_40 - ad_32 > ad_0 - ad_8) return (1);
   return (0);
}

int s2_Sell(double ad_0, double ad_8, double ad_16, double ad_24, double ad_32, double ad_40, bool ai_48, bool ai_52) {
   if (ad_40 > ad_8) return (0);
   if (ai_48)
      if (ad_16 <= 0.0) return (0);
   if (ai_52)
      if (ad_24 > ad_16) return (0);
   if (ad_40 - ad_32 > ad_0 - ad_8) return (1);
   return (0);
}

int IsTradeTime(string as_unused_0, int ai_unused_8, int ai_unused_12, int ai_16, int ai_20) {
   if (ai_16 > 31 - ai_20) return (0);
   return (1);
}

double TimeZoneLocal() {
   int lia_0[43];
   switch (GetTimeZoneInformation(lia_0)) {
   case 0:
      return (lia_0[0] / (-60.0));
   case 1:
      return (lia_0[0] / (-60.0));
   case 2:
      return ((lia_0[0] + lia_0[42]) / (-60.0));
   }
   return (0);
}

double TimeZoneServer() {
   int li_0 = (TimeCurrent() - TimeLocal()) / 60;
   int li_4 = MathRound(li_0 / 30.0);
   li_0 = 30 * li_4;
   double ld_ret_8 = TimeZoneLocal() + li_0 / 60.0;
   return (ld_ret_8);
}

double GetGmtOffset() {
   return (TimeZoneServer());
}
