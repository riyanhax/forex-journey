/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#import "TurboScalper.dll"
   int InitDll(int a0);
   double Proc1(double& a0[], double& a1[], double a2, double a3, double a4, double a5, int a6, int a7);
   double Proc2(double& a0[], double& a1[], double a2, double a3, double a4, double a5, int a6, int a7);
   double Proc3(double& a0[], double& a1[], double a2, double a3, double a4, double a5);
   double Proc4(double& a0[], double& a1[], double a2, double a3, double a4, double a5);
   double Proc5(double& a0[], double& a1[], double a2, double a3, double a4, double a5, double a6, double a7);
   double Proc6(double& a0[], double& a1[], double a2, double a3, double a4, double a5, double a6, double a7);
#import

extern double LotSize = 0.1;
double gd_unused_84 = 0.1;
extern double MaxTP = 2.0;
int gi_100 = 0;
string gs_unused_104 = "===============================";
bool gi_112 = FALSE;
double gd_116 = 3.0;
bool gi_124 = FALSE;
bool gi_128 = FALSE;
bool gi_132 = FALSE;
bool gi_136 = FALSE;
bool gi_140 = FALSE;
double gd_144 = 0.0;
string gs_unused_152 = "===============================";
int gi_unused_160 = 23;
string gs_unused_164 = "===============================";
extern int Magic = 12345;
int gi_176 = 21;
int gi_180 = 23;
int g_error_184;
bool gi_188;
bool gi_192;
bool gi_196;
int gi_200;
int gi_204;
int g_slippage_208;
int g_slippage_212;
int gi_216 = 1;
double gda_228[3];
double gda_232[3];
double gd_236;
double gd_244;
double gd_252;
double gd_260;
double gd_268;
double gd_276;
double gd_284;
double g_ima_292;
double g_ima_300;
double g_ima_308;
double g_ima_316;
double g_irsi_324;
double g_irsi_332;
double g_iwpr_340;
double g_iwpr_348;
double gd_364;
double gd_372;
double gd_380;
double g_price_388;
double gd_396;
double gd_unused_412;
double gd_unused_452;
double gd_460;
double gd_468;
string gs_476;
bool gi_unused_484 = FALSE;
bool g_bool_488 = FALSE;
int gi_unused_492 = 2;

int init() {
   g_bool_488 = InitDll(WindowHandle(Symbol(), Period())) == 1;
   if (!g_bool_488) Alert("wrong account#");
   gs_476 = StringSubstr(Symbol(), 0, 6);
   gd_276 = 10000.0 * (Ask - Bid);
   gi_200 = gi_176 + gi_100;
   gi_204 = gi_180 + gi_100;
   gd_unused_452 = Digits;
   if (gi_200 > 23) gi_200 -= 24;
   if (gi_204 > 23) gi_204 -= 24;
   gd_unused_412 = iTime(NULL, PERIOD_M15, 1);
   MaxTP /= 10000.0;
   gd_144 /= 10000.0;
   g_slippage_208 = 0;
   g_slippage_212 = 1;
   if (gi_124 == TRUE && gi_128 == TRUE) gi_unused_484 = TRUE;
   return (0);
}

int start() {
   if (!IsDllsAllowed()) {
      Alert("Allowed DLL imports in settings (Tools -> Options -> Expert Advisors -> Allow DLL imports [without confirm])");
      return;
   }
   //if (!g_bool_488) {
      //Alert("wrong account#");
      //return;
   //}
   gs_476 = StringSubstr(Symbol(), 0, 6);
   Coment();
   HideTestIndicators(TRUE);
   gi_188 = FALSE;
   gi_192 = FALSE;
   gi_196 = FALSE;
   g_error_184 = GetLastError();
   gd_268 = MathMax(MarketInfo(Symbol(), MODE_STOPLEVEL), MarketInfo(Symbol(), MODE_FREEZELEVEL));
   gda_228[0] = High[1];
   gda_228[1] = High[2];
   gda_228[2] = High[3];
   gda_228[3] = High[4];
   gda_232[0] = Low[1];
   gda_232[1] = Low[2];
   gda_232[2] = Low[3];
   gda_232[3] = Low[4];
   gd_236 = NormalizeDouble(Proc1(gda_228, gda_232, gd_236, gd_244, gd_276, gd_284, gi_192, gi_196), 5);
   gd_244 = NormalizeDouble(Proc2(gda_228, gda_232, gd_236, gd_244, gd_276, gd_284, gi_192, gi_196), 5);
   gd_252 = NormalizeDouble(Proc3(gda_228, gda_232, gd_236, gd_244, gd_276, gd_284), 5);
   gd_260 = NormalizeDouble(Proc4(gda_228, gda_232, gd_236, gd_244, gd_276, gd_284), 5);
   gd_276 = 10000.0 * (Ask - Bid);
   gd_284 = Ask - Bid;
   g_ima_292 = iMA(NULL, 0, 9, 0, MODE_SMA, PRICE_MEDIAN, 1);
   g_ima_300 = iMA(NULL, 0, 9, 0, MODE_SMA, PRICE_MEDIAN, 2);
   g_ima_308 = iMA(NULL, 0, 9, 0, MODE_SMA, PRICE_MEDIAN, 3);
   g_ima_316 = iMA(NULL, 0, 18, 0, MODE_SMA, PRICE_MEDIAN, 0);
   g_irsi_324 = iRSI(NULL, 0, 7, PRICE_OPEN, 0);
   g_irsi_332 = iRSI(NULL, 0, 7, PRICE_OPEN, 1);
   g_iwpr_340 = iWPR(NULL, 0, 14, 0);
   g_iwpr_348 = iWPR(NULL, 0, 14, 1);
   gd_364 = MathMin(gd_260, gd_244);
   gd_380 = MathMax(gd_252, gd_236);
   gd_372 = NormalizeDouble(Proc5(gda_228, gda_232, gd_236, gd_244, gd_276, gd_284, gd_364, gd_380), 5);
   g_price_388 = NormalizeDouble(Proc6(gda_228, gda_232, gd_236, gd_244, gd_276, gd_284, gd_364, gd_380), 5);
   gd_460 = gd_268 / 10000.0;
   if (gi_112 == TRUE) {
      gd_396 = gd_116 / 10000.0;
      gi_216 = 6;
   } else gd_396 = Ask - Bid;
   CHF();
   gi_188 = FALSE;
   gi_192 = FALSE;
   gi_196 = FALSE;
   GBP();
   if (g_error_184 >= 2/* COMMON_ERROR */ && g_error_184 != 130/* INVALID_STOPS */ && g_error_184 <= 150 && gi_136 == TRUE) Alert("error # ", g_error_184, " Find a definition here http://docs.mql4.com/constants/errors");
   return (0);
}

int Coment() {
   Comment("------------------", 
      "\n", "TurboScalper EA is running", 
      "\n", "------------------", 
      "\n", "TradingLot = ", LotSize, 
      "\n", "Current Spread = ", gd_276, 
   "\n", "Max Available Spread = ", gi_216);
   return (0);
}

int OC(double a_price_0) {
   OrderClose(OrderTicket(), OrderLots(), a_price_0, g_slippage_212, Red);
   return (0);
}

int OrderModif() {
   for (int l_pos_0 = OrdersTotal() - 1; l_pos_0 >= 0; l_pos_0--) {
      if (OrderSelect(l_pos_0, SELECT_BY_POS) == TRUE && OrderMagicNumber() == Magic && StringSubstr(OrderSymbol(), 0, 6) == gs_476) {
         gi_188 = TRUE;
         if (OrderType() == OP_BUY) {
            if ((gda_228[0] + 0.0003 <= g_ima_292 && Bid >= gda_228[0] - 0.0001) || (gda_228[0] <= g_ima_292 && gda_228[1] <= g_ima_300 && gda_228[2] <= g_ima_308 && Bid >= gda_228[0])) {
               OC(Bid);
               gd_468 = 1;
            }
            if (Bid > g_price_388 - 0.00001 && gi_128 == FALSE) OC(Bid);
            if (Bid >= gda_228[0] && gda_228[0] <= gda_228[1] && gda_228[1] <= gda_228[2] && gda_228[2] <= gda_228[3] && g_ima_292 <= g_ima_308 && gs_476 == "EURGBP") {
               OC(Bid);
               gd_468 = 1;
            }
            if (g_price_388 - OrderOpenPrice() > MaxTP && g_price_388 - Bid >= gd_460 && gi_124 == TRUE)
               if ((Ask - OrderStopLoss() >= gd_268 && gd_144) || !gd_144) OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), OrderOpenPrice() + MaxTP, 0, CLR_NONE);
            if (g_price_388 - OrderOpenPrice() <= MaxTP && g_price_388 != OrderTakeProfit() && g_price_388 - Bid >= gd_460 && gi_124 == TRUE)
               if ((Ask - OrderStopLoss() >= gd_268 && gd_144) || !gd_144) OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), g_price_388, 0, CLR_NONE);
            if (Bid - OrderOpenPrice() > MaxTP - 0.00001 && gi_128 == FALSE) OC(Bid);
            if (OrderOpenPrice() - Low[0] >= 0.001 && OrderOpenPrice() - Bid <= (OrderOpenPrice() - Low[0]) / 2.0) {
               OC(Bid);
               gd_468 = 1;
            }
         }
         if (OrderType() == OP_SELL) {
            if ((gda_232[0] - 0.0003 >= g_ima_292 && Bid <= gda_232[0] + 0.0001) || (gda_232[0] >= g_ima_292 && gda_232[1] >= g_ima_300 && gda_232[2] >= g_ima_308 && Bid <= gda_232[0])) {
               OC(Ask);
               gd_468 = 2;
            }
            if (Ask - gd_396 < gd_372 + 0.00001 && gi_128 == FALSE) OC(Ask);
            if (Bid <= gda_232[0] && gda_232[0] >= gda_232[1] && gda_232[1] >= gda_232[2] && gda_232[2] >= gda_232[3] && g_ima_292 >= g_ima_308 && gs_476 == "EURGBP") {
               OC(Ask);
               gd_468 = 2;
            }
            if (OrderOpenPrice() - gd_372 - gd_396 > MaxTP && Ask - gd_372 - gd_396 >= gd_460 && gi_124 == TRUE)
               if ((Ask - OrderStopLoss() >= gd_268 && gd_144) || !gd_144) OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), OrderOpenPrice() - MaxTP, 0, CLR_NONE);
            if (OrderOpenPrice() - gd_372 - gd_396 <= MaxTP && gd_372 + gd_396 != OrderTakeProfit() && Ask - gd_372 - gd_396 >= gd_460 && gi_124 == TRUE)
               if ((Ask - OrderStopLoss() >= gd_268 && gd_144) || !gd_144) OrderModify(OrderTicket(), OrderOpenPrice(), OrderStopLoss(), gd_372 + gd_396, 0, CLR_NONE);
            if (OrderOpenPrice() - Ask > MaxTP - 0.00001 && gi_128 == FALSE) OC(Ask);
            if (High[0] - OrderOpenPrice() >= 0.001 && Ask - OrderOpenPrice() <= (High[0] - OrderOpenPrice()) / 2.0) {
               OC(Ask);
               gd_468 = 2;
            }
         }
      }
   }
   return (0);
}

int CheckParam() {
   if (gd_276 >= gi_216 + 1 && gi_132 == TRUE) Alert("Spread is higher than ", gi_216, " pips - NO TRADE");
   if ((DayOfWeek() == 5 && Hour() > 12) || (DayOfWeek() == 1 && Hour() < 12)) gi_192 = TRUE;
   if (gi_200 > gi_204 && Hour() >= gi_200 || Hour() < gi_204) gi_196 = TRUE;
   if (gi_200 < gi_204 && (Hour() >= gi_200 && Hour() < gi_204)) gi_196 = TRUE;
   return (0);
}

string GBP() {
   double l_price_0;
   Coment();
   CheckParam();
   OrderModif();
   if (gd_144 != 0.0 && gi_140 == TRUE) l_price_0 = Ask - gd_144;
   if (Bid <= g_ima_316 && gd_468 != 1.0 && g_ima_292 > g_ima_308 && gi_192 != TRUE && gd_276 <= gi_216 && Ask - gd_396 < gd_364 + 0.00001 && gi_188 != TRUE) {
      OrderSend(Symbol(), OP_BUY, LotSize, Ask, g_slippage_208, l_price_0, 0, 0, Magic, 0, Blue);
      gd_468 = 0;
   }
   if (gd_144 != 0.0 && gi_140 == TRUE) l_price_0 = Bid + gd_144;
   if (Bid >= g_ima_316 && gd_468 != 2.0 && g_ima_292 < g_ima_308 && gi_192 != TRUE && gd_276 <= gi_216 && Bid > gd_380 - 0.00001 && gi_188 != TRUE) {
      OrderSend(Symbol(), OP_SELL, LotSize, Bid, g_slippage_208, l_price_0, 0, 0, Magic, 0, Blue);
      gd_468 = 0;
   }
   return ("");
}

void CHF() {
   double l_price_0;
   if (gs_476 != "EURCHF" || DayOfWeek() == 0) return;
   Coment();
   CheckParam();
   OrderModif();
   if (gd_144 != 0.0 && gi_140 == TRUE) l_price_0 = Ask - gd_144;
   if (Bid <= g_ima_316 && gd_468 != 1.0 && g_ima_292 > g_ima_308 && gi_192 != TRUE && gd_276 <= gi_216 && Ask - gd_396 < gd_364 + 0.00001 && gi_188 != TRUE) {
      OrderSend(Symbol(), OP_BUY, LotSize, Ask, g_slippage_208, l_price_0, 0, 0, Magic, 0, Blue);
      gd_468 = 0;
   }
   if (gd_144 != 0.0 && gi_140 == TRUE) l_price_0 = Bid + gd_144;
   if (Bid >= g_ima_316 && gd_468 != 2.0 && g_ima_292 < g_ima_308 && gi_192 != TRUE && gd_276 <= gi_216 && Bid > gd_380 - 0.00001 && gi_188 != TRUE) {
      OrderSend(Symbol(), OP_SELL, LotSize, Bid, g_slippage_208, l_price_0, 0, 0, Magic, 0, Blue);
      gd_468 = 0;
   }
}